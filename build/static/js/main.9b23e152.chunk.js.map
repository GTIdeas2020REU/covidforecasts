{"version":3,"sources":["components/Navbar/index.js","constants/routes.js","utils/data.js","components/InteractiveChartTemp/index.js","components/ParentChart/index.js","containers/ChartContainer/index.js","pages/AboutPage/index.js","pages/LandingPage/index.js","components/LeaderboardChart/index.js","constants/colors.js","components/Leaderboard/index.js","components/UserPredictionChart/index.js","containers/UserPredictionChartContainer/index.js","pages/ProfilePage/index.js","components/InteractiveChart/index.js","containers/InteractiveChartContainer/index.js","components/Mapportal/index.js","components/LogIn/index.js","components/SignUp/index.js","App.js","serviceWorker.js","index.js","components/Navbar/COVIDforecasts-logo-white.png"],"names":["Navbar","props","changeTab","tabID","setState","console","log","state","active","isLoggedIn","fetch","then","response","json","data","loggedinstate","logoutbutton","loginbutton","signupbutton","bind","this","method","headers","className","href","id","data-toggle","exact","activeClassName","to","onClick","saveLogout","src","covidforecastslogo","style","width","marginTop","type","data-target","aria-controls","aria-expanded","aria-label","renderDropdown","React","Component","organizeData","orgs","Object","keys","results","i","length","forecast","dates","target_end_date","values","value","result","forEach","key","push","clamp","a","b","c","Math","max","min","getMostRecentPrediction","sort","Date","reformatData","map","date","d3","reformatPredData","d","substring","defined","findYatX","x","path","startX","getXY","len","point","getPointAtLength","y","start","end","getTotalLength","mid","currPoint","currPointX","getAllDataPoints","pathNode","xAxis","yAxis","startDate","endDate","invert","offset","getDataPointsFromPath","predictionData","lastPredDate","cleanData","predStartDate","idxOfStartDate","f","left","splice","getLastValue","getLastDate","createDefaultPrediction","predEndDate","defaultData","currDate","InteractiveChartTemp","modal","document","createElement","modalContent","text","innerText","signinBtn","onclick","window","location","signupBtn","appendChild","querySelector","append","chart","renderChart","userPrediction","confirmed","confirmedAvg","aggregate","loggedIn","height","marginBottom","appendModal","domain","svg","confirmedData","confirmedTemp","confirmedLastVal","aggregateData","forecastData","line","curve","predLine","labels","concat","color","range","confirmedBoundary","defs","confirmedArea","attr","predictionArea","datum","selectAll","enter","index","filter","cleanPrediction","filteredData","predictionLine","forecastPaths","querySelectorAll","confirmedPath","aggregatePath","compiledData","drag","on","pos","round","node","category","body","JSON","stringify","call","getElementById","event","target","display","focus","focusX","focusY","focusHeight","nice","brush","extent","selection","newX","select","gb","move","defaultSelection","focusLine","focusPredLine","createFocusContext","ParentChart","chartRef","createRef","confirmedStartdate","setUpChart","confirmedStartDate","isProfile","predLength","margin","current","yMax","currMax","ChartContainer","res","pstyle","textAlign","marginLeft","fontSize","h1style","AboutPage","LeaderboardChart","prevProps","prevState","legendString","legend","mainArea","lineGenerator","predLineGenerator","ref","colors","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","column","render","getHeaderProps","RenderOrgsTable","RenderUsersTable","users","selectedID","user","mse_score","username","$","removeClass","addClass","empty","ReactDOM","prediction","createUserChart","toFixed","entries","backgroundColor","Leaderboard","Header","accesor","getCellValue","row","children","eq","click","undefined","asc","table","parents","find","toArray","valA","valB","isNumeric","toString","localeCompare","reverse","trigger","remove","overflowY","position","UserPredictionChart","userStatus","innerHTML","p","sortedDict","dateObj","sortDictByDate","sortedDates","sortStringDates","mostRecentPred","today","toISOString","todayMarker","tooltip","mousePerLine","todayDate","newDate","pred","mouse","xCoord","element","floor","ceil","UserPredictionChartContainer","ProfilePage","renderUser","InteractiveChart","loginStatus","renderChartUnregistered","confirmedLastDate","mse","orgIndices","sortable","err","sortedOrgs","j","tempForecast","Array","k","w","h","confirmedMax","forecastMax","yAxisMax","models","o","idx","indexOf","names","modelClassNames","confirmedLine","confirmedAreaEndX","confirmedAreaEndY","yourLine","slice","getElementsByClassName","name","lastDate","m","getBoundingClientRect","drawingInstruction","selectCircle","focusPredCurve","tooltipArea","tooltipBox","yCoord","xLowerBoundary","pageX","pageY","textBox","html","deleteButton","deletePrediction","filtered","legendCompleteWidth","legendConfirmed","legendAggregate","legendPrediction","legendGeorgiaTech","legendIhme","legendYouyang","legendColumbia","legendUcla","savePrediction","confirmedAreaWidth","clickAreaWidth","class","InteractiveChartContainer","user_mse","mapStyle","feature","weight","opacity","dashArray","fillOpacity","fillColor","Mapportal","onEachFeature","layer","bindTooltip","properties","noHide","openTooltip","mouseover","highlightFeature","mouseout","resetHighlight","e","alert","setStyle","L","Browser","ie","opera","edge","bringToFront","geojson","resetStyle","countries","center","zoom","layers","tileLayer","maxZoom","attribution","geoJson","statesData","addTo","countriesData","overlay","control","layerGroup","Login","wasSucess","Promise","resolve","reject","updateLoginState","setTimeout","password","preventDefault","saveLogin","onSubmit","handleSubmit","onChange","handleChange","required","SignUp","nam","email","paddingRight","App","aria-haspopup","aria-labelledby","component","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.9b23e152.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport covidforecastslogo from './COVIDforecasts-logo-white.png'\nimport './Navbar.css'\n\nclass Navbar extends React.Component {\n  \tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tloggedinstate: '', \n\t\t\tlogoutbutton: null, \n\t\t\tloginbutton: null, \n\t\t\tsignupbutton: null,\n\t\t}\n\t\tthis.isLoggedIn = this.isLoggedIn.bind(this)\n\t}\n\n\t/*\n\tisLoggedIn() {\n\t\tfetch('/user-status').then(res => res.json()).then(data => {\n\t\t\tthis.setState({ users: data });\n\t\t});\n\t}*/\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"nav bar loading\");\n\t\tthis.isLoggedIn();\n\t\tthis.setState({'active': 'home'});\n\t}\n\n\tchangeTab = (tabID) => {\n\t\tthis.setState({'active': tabID});\n\t\tconsole.log(\"ACTIVE TAB\");\n\t\tconsole.log(this.state.active);\n\t}\n\n\tasync saveLogout() {\n\t\tfetch('/logout/',{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\t\t\n\t}\n\n\tisLoggedIn = () => {\n\t\tfetch('/login-status/')\n\t\t.then((response) => response.json())\n\t\t.then((data) => this.setState({loggedinstate: data}));\n\t}\n\n\n\trenderDropdown(){\n\t\tif (this.state.loggedinstate['logged in']) {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown ml-auto\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n\t\t\t\t\t\t\t\tHello {this.state.loggedinstate['name']}!\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu dropdown-menu-left\">\n\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.PROFILE}>Profile</NavLink>\n\t\t\t\t\t\t\t<NavLink className=\"dropdown-item\" to={ROUTES.LANDING}><a className=\"dropdown-item\" onClick={() => this.saveLogout()} href='/'>Sign Out</a></NavLink>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">Welcome</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu\">\n\t\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.SIGN_UP}>Sign Up</NavLink>\n\t\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.SIGN_IN}>Sign In</NavLink>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n  \trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n\t\t\t\t<a className=\"navbar-brand\" href='/'>\n\t\t\t\t\t<img id='logo' src={covidforecastslogo} style={{width:450, marginTop: -10}}></img>\n\t\t\t\t</a>\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t\t</button>\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n\t\t\t\t\t<div className=\"navbar-nav\">\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LANDING}>Home</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.ABOUT}>About</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LEADERBOARD}>Top Forecasts</NavLink>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.renderDropdown()}\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n  \t}\n}\n\nexport default Navbar;\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const ABOUT = '/about';\nexport const PROFILE = '/profile';\nexport const MAP_PORTAL = '/map-portal';\nexport const MARKET = '/market';\nexport const LEADERBOARD = '/leaderboard';\nexport const US_NATIONAL_CUM = '/us-national-cumulative';\nexport const US_NATIONAL_INC = '/us-national-incident';\nexport const US_STATE = '/us-state';\n","import * as d3 from 'd3'\n\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n  return result;\n};\n\nexport const organizeData = (data) => {\n  var orgs = Object.keys(data);\n  var results = [];\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n}\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n  while (current <= end) {\n      dateArray.push(new Date(current).toISOString().slice(0,10));\n      current = addDays(current, 1);\n  }\n  return dateArray;\n}\n\nexport const clamp = (a, b, c) => { \n  return Math.max(a, Math.min(b, c)) \n}\n\nexport const formatValue = (value) => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n\n  g\n      .style(\"display\", null)\n      .style(\"pointer-events\", \"none\")\n      .style(\"font\", \"10px sans-serif\");\n\n  const path = g.selectAll(\"path\")\n    .data([null])\n    .join(\"path\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\");\n\n  const text = g.selectAll(\"text\")\n    .data([null])\n    .join(\"text\")\n    .call(text => text\n      .selectAll(\"tspan\")\n      .data((value + \"\").split(/\\n/))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => `${i * 1.1}em`)\n        .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n        .text(d => d));\n\n  const {x, y, width: w, height: h} = text.node().getBBox();\n\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n}\n\nexport const sortDictByDate = (data) => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d]\n  })\n  return sortedDict;\n}\n//pass in list of string dates, return string dates y-m-d\nexport const sortStringDates = (data) => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n}\n\nexport const getMostRecentPrediction = (data) => {\n  if (Object.keys(data).length === 0) return null;\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  return data[mostRecentDate]\n}\n\nexport const reformatData = (data) => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n}));\n}\n\nexport const reformatPredData = (data) => {\n  return data.map(d => ({\n      date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n      value: d.value,\n      defined: d.defined\n      })\n  );\n}\n//returns y coordinate at given x \n/*export const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {return null}\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y];\n  }\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.01;\n    }\n    else {\n      console.log(currPointX);\n      result = currPoint[1];\n      break;\n    }\n  }\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start)[1];\n  }\n  return result;\n}*/\n\nexport const findYatX = (x, path, startX) => {\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y, len];\n  }\n  var start = startX;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.001; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.001;\n    }\n    else {\n      result = currPoint;\n      break;\n    }\n  }\n  if (result === 0) {\n    result = getXY(start);\n  }\n  return result;\n}\n\n//for confirmedData, forecastData, aggregateData\nexport const getAllDataPoints = (pathNode, xAxis, yAxis, startDate, endDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n  while (+date <= +endDate) {\n    var x = xAxis(date);\n    var point = findYatX(x, pathNode, startX);\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1])\n    });\n    startX = point[2];\n    date = d3.timeDay.offset(date, 1);\n  }\n  return data;\n}\nexport const getDataPointsFromPath = (predictionData, pathNode, xAxis, yAxis, lastPredDate) => {\n  var date = predictionData[0].date;\n  var startX = 0;\n  for (var i = 0; i < predictionData.length; i++) {\n    if (+predictionData[i].date > +lastPredDate) {\n      break;\n    }\n    if (predictionData[i].defined === 0) {\n      date = predictionData[i].date;\n      var point = findYatX(xAxis(date), pathNode, startX);\n      predictionData[i].defined = true;\n      predictionData[i].value = yAxis.invert(point[1]);\n      startX = point[2];\n    }\n  }\n  return predictionData;\n}\n\nexport const cleanData = (data, predStartDate, value) => {\n  var idxOfStartDate = d3.bisector(f => f.date).left(data, predStartDate);\n  if (data.length > 0 && +data[idxOfStartDate].date === +predStartDate) {\n    data[idxOfStartDate].value = value;\n  }\n  else {\n    data.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: value\n    });\n  } \n  return data.splice(idxOfStartDate, data.length);\n}\n\nexport const getLastValue = (data) => {\n  return data[data.length - 1].value;\n}\n\nexport const getLastDate = (data) => {\n  return data[data.length - 1].date;\n}\n\nexport const color = (names) => {\n  d3\n    .scaleOrdinal()\n    .domain(names)\n    .range(d3.schemeTableau10);\n}\n\nexport const createDefaultPrediction = (predStartDate, predEndDate) => {\n  var defaultData = [];\n  var currDate = predStartDate;\n  //var defined = true;\n  //var value = confirmedData[confirmedData.length - 1].value;\n  \n  //create defaultPredictionData\n  while(+currDate <= +predEndDate) {\n      defaultData.push({date: currDate, value: 0, defined: 0});\n      currDate = d3.timeDay.offset(currDate, 1);\n  }\n  return defaultData;\n}\n\nexport const cleanPrediction = (data, predStartDate, predEndDate, confirmedLastVal) => {\n  if (+data[0].date !== +predStartDate) {\n    console.log(\"needs to be reformatted\")\n    data = reformatPredData(data);\n    var currDate = d3.timeDay.offset(getLastDate(data), 1);\n    data = data.concat(createDefaultPrediction(currDate, predEndDate));\n  }\n  data = data.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n  data[0].value = confirmedLastVal;\n  data[0].defined = true;\n  return data;\n}\n\n\nexport const savePrediction = (data, category) => {\n  fetch('/update/',{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\"data\": data, \"category\": category}),\n  });\n}\n\nexport const createFocusContext = (svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color) => {\n  const focusHeight = 100;\n  const focusMargin = 50;\n  var focus = svg\n                  .append(\"g\")\n                      .attr(\"viewBox\", [0, 0, width, focusHeight])\n                      .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                      //.attr(\"width\", width + 100)\n                      //.attr(\"height\", height)\n                      .style(\"display\", \"block\")\n\n  var focusX = d3\n                  .scaleTime()\n                  .domain(x.domain())\n                  .range([0, width]);\n  const focusY = d3\n                  .scaleLinear()\n                  .domain(y.domain())\n                  .range([focusHeight - focusMargin, 0])\n                  .nice();\n  \n  var focusXAxis = focus\n                        .append(\"g\")\n                        .attr(\"transform\", `translate(0,${focusHeight - marginBottom})`)\n                        .call(d3.axisBottom(focusX));\n  const brush = d3.brushX()\n                  .extent([[0, 0], [width, focusHeight - marginBottom]])\n                  .on(\"brush\", brushed)\n                  .on(\"end\", brushended);\n\n  const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n\n  const focusLine = d3.line()\n                      .curve(d3.curveCatmullRom)\n                      .x(function(d) {return x(d.date)})\n                      .y(function (d) {return focusY(d.value)})\n  \n  const focusPredLine = d3.line()\n                          .curve(d3.curveBasis)\n                          .defined(d => d.defined)\n                          .x(function(d) { return x(d.date) })\n                          .y(function(d) { return focusY(d.value) })        \n  focus.append(\"path\")\n      .datum(confirmedData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[1]))\n  \n  focus.append(\"path\")\n      .datum(aggregateData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[2]))\n\n  var contextPredCurve = focus.append(\"path\")\n                              .datum(predictionData)\n                              .attr(\"d\", focusPredLine)\n                              .attr(\"class\", \"context-curve\")\n                              .attr(\"stroke\", color(labels[0]))\n  console.log(labels);\n  focus.selectAll(\".forecast-small\")\n        .data(forecastData)\n        .enter()\n        .append(\"path\")\n            .attr(\"d\", line)\n            .attr(\"class\", \"context-curve\")\n            .style(\"stroke\", (f, index) => color(labels[3 + index]))\n            .style(\"stroke-width\", \"2px\");\n\n  function brushed() {\n      if (d3.event.selection) {\n          var extent = d3.event.selection;\n          x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n          xAxis.call(d3.axisBottom(x))\n          var newX = x(getLastDate(confirmedData));\n          newX = newX < 0 ? 0 : newX;\n          d3\n              .select(\"#prediction-clip\")\n              .select(\"rect\")\n                  .attr(\"width\", width - newX)\n                  .attr(\"x\", newX);\n          d3\n                  .select(\"#confirmed-clip\")\n                  .select(\"rect\")\n                      .attr(\"width\", newX)\n\n          svg\n              .selectAll(\".line\")\n              .attr('d', line)\n\n          svg\n              .select(\"#your-line\")\n              .attr(\"d\", predLine)\n          \n          svg\n              .select(\"#draw-guess\")\n              .attr(\"x\", newX + (width - newX) / 2);\n          svg\n              .select(\"#pointer\")\n              .selectAll(\"circle\")\n                  .attr(\"cx\", newX);\n      }\n  }\n  \n  function brushended() {\n      if (!d3.event.selection) {\n          gb.call(brush.move, defaultSelection);\n      }\n\n  }\n  const gb = focus\n                  .call(brush)\n                  .call(brush.move, defaultSelection);  \n}","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport {cleanPrediction, createFocusContext, savePrediction, getLastDate, createDefaultPrediction, getLastValue, cleanData, clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport './InteractiveChartTemp.css';\n\n\n\nclass InteractiveChartTemp extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        console.log(modal);\n        console.log(document.querySelector(\".modal\"))\n        document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        this.props.chart.append(\"rect\")\n        this.renderChart();\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn, x, y, width, height, predStartDate, xAxis, marginBottom, appendModal} = this.props;\n        console.log(marginBottom);\n        this.appendModal();\n        const predEndDate = x.domain()[1];\n        var svg = this.props.chart;\n        var confirmedData = reformatData(confirmedAvg);\n        const confirmedTemp = reformatData(confirmed);\n        const confirmedLastVal = getLastValue(confirmedTemp);\n        confirmedData.push({\n            date: getLastDate(confirmedTemp),\n            value: confirmedLastVal\n        })\n        console.log(confirmedData)\n        var aggregateData = reformatData(aggregate);\n        var forecastData = forecast.map((f)=> {\n            return cleanData(reformatData(f), predStartDate, confirmedLastVal);\n        });\n        aggregateData = cleanData(aggregateData, predStartDate, confirmedLastVal);\n        var predictionData = userPrediction;\n        var line = d3.line().curve(d3.curveCatmullRom)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        var predLine = d3.line().curve(d3.curveBasis)\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        const labels = ['User Prediction', 'Confirmed Data', 'Aggregate Data'].concat(orgs);\n        const color = d3\n            .scaleOrdinal()\n            .domain(labels)\n            .range(d3.schemeTableau10);\n        var confirmedBoundary = x(predStartDate);\n        var defs = svg\n            .append(\"defs\");\n        var confirmedClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"confirmed-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"width\", confirmedBoundary)\n                    .attr(\"height\", height)\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n        const confirmedArea = svg\n                .append('g')\n                .attr(\"clip-path\", \"url(#confirmed-clip)\");\n        var predictionClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"prediction-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"id\", \"prediction-rect\")\n                    .attr(\"width\", width - confirmedBoundary )\n                    .attr(\"height\", height)\n                    .attr(\"x\", confirmedBoundary)\n                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        var confirmedLine = confirmedArea.append(\"path\")\n            .attr(\"class\", \"confirmed line\")\n            .datum(confirmedData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[1]))\n            .style(\"stroke-width\", \"3px\")\n        var aggregateLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"aggregate line\")\n            .datum(aggregateData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[2]))\n            .style(\"stroke-width\", \"2px\")\n        predictionArea\n            .selectAll(\".forecast\")\n            .data(forecastData)\n            .enter()\n            .append(\"path\")\n                .attr(\"d\", line)\n                .attr(\"id\", (f, index) => orgs[index])\n                .attr(\"class\", \"forecast line\")\n                .style(\"stroke\", (f, index) => color(orgs[index]))\n                .style(\"stroke-width\", \"2px\");\n        \n        ///prediction data////\n        if (loggedIn) {\n            console.log(predEndDate)\n            predictionData = getMostRecentPrediction(userPrediction);\n            console.log(predictionData);\n            if (!predictionData) {\n                predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            }\n            predictionData = cleanPrediction(predictionData, predStartDate, predEndDate, confirmedLastVal);\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        }\n        var filteredData = predictionData.filter(predLine.defined())\n\n        var predictionLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"prediction line\")\n            .datum(predictionData)\n            .attr(\"d\", predLine)\n            .style(\"stroke\", color(labels[0]))\n            .style(\"stroke-width\", \"2px\")\n        \n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\".confirmed\");\n        const aggregatePath = document.querySelector(\".aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, x.domain()[0], predStartDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, predStartDate, getLastDate(aggregateData))\n        forecastData.map((f, index) => {\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, getLastDate(f));\n        })\n        var compiledData = [predictionData, confirmedData, aggregateData].concat(forecastData);\n        /////drag/////\n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n        var drag = d3.drag()\n                        .on(\"drag\", function() {\n                        console.log('yes');\n                        //hide \"draw your guess\" text\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, y.domain()[1], y.invert(pos[1]));\n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        compiledData[0].data = predictionData;\n                        filteredData = predictionData.filter(predLine.defined())\n                        predictionLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(labels[0]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        if(!loggedIn) {\n                            d3\n                                .select(\"#modal\")\n                                .style(\"display\", \"block\");\n                        }\n                        else {\n                            var lastPredDate = getLastDate(filteredData);\n                            getDataPointsFromPath(predictionData, predictionLine.node(), x, y, lastPredDate);\n                            savePrediction(predictionData, \"us_daily_deaths\");\n                        }\n                    });\n        svg.call(drag)\n\n        var modal = document.getElementById(\"modal\");\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n        }\n        //focus+context//\n        createFocusContext(svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color);\n        ///tooltip///\n    }\n    render() {\n        console.log(this.props.chart.node());\n        return(\n            <div></div>\n        )\n    }\n}\n\nexport default InteractiveChartTemp;","import React, { Component, Fragment } from 'react';\nimport * as d3 from 'd3'\nimport InteractiveChartTemp from '../InteractiveChartTemp';\n\n\nclass ParentChart extends Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            chart: null,\n            x: null,\n            y: null,\n            width: 0,\n            height: 0,\n            confirmedStartdate: null,\n            predStartDate: null,\n            predEndDate: null,\n            xAxis: null,\n            marginBottom: 0\n\n        }\n    }\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        //document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        var chart = this.setUpChart();\n        this.setState({chart: chart})\n    }\n\n    setUpChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, loggedIn, isProfile} = this.props;\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[0]);\n        const predStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[Object.keys(confirmed).length - 1]);\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength);\n        this.setState({confirmedStartDate: confirmedStartDate, predStartDate: predStartDate, predEndDate: predEndDate, predLength: predLength});\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        this.setState({marginBottom: margin.bottom});\n        console.log(margin.bottom, this.state.marginBottom)\n        this.setState({width: width, height: height})\n        var svg = d3.select(\".chart-container\")\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                    .attr(\"ref\", `${this.chartRef.current}`)\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([ 0, width ])\n                    //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        this.setState({xAxis: xAxis});\n        console.log(xAxis.node());\n        var yMax = d3.max(Object.values(confirmed));\n        forecast.map(f => {\n            var currMax = d3.max(f)\n            yMax = currMax > yMax ? currMax : yMax;\n        })\n        var y = d3.scaleLinear()\n            .domain([0, yMax])\n            .range([ height, 0 ])\n            .nice();\n        this.setState({x: x, y: y});\n\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n        return svg;\n    }\n\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.props;\n        console.log(forecast)\n        if(!this.state.chart || !this.state.marginBottom) return \"Loading\"\n        return(\n            <Fragment>\n                {!this.props.isProfile ? \n                <h1>UserPredictionChart</h1> : \n                <InteractiveChartTemp \n                    chart={this.state.chart}\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedAvg={confirmedAvg}\n                    aggregate={aggregate}\n                    loggedIn={loggedIn}\n                    x={this.state.x}\n                    y={this.state.y}\n                    width={this.state.width}\n                    height={this.state.height}\n                    predStartDate={this.state.predStartDate}\n                    xAxis={this.state.xAxis}\n                    marginBottom = {this.state.marginBottom}\n                    appendModal={this.appendModal()}\n                />}\n            </Fragment>\n        )\n    }\n}\n\nexport default ParentChart;","import React from 'react';\nimport ParentChart from '../../components/ParentChart';\n\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: null,\n      orgs: null,\n      confirmed: null,\n      confirmedAvg: null,\n      userPrediction: null,\n      aggregate: null,\n      loggedIn: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({ forecast: results, orgs });\n    });\n    fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n        this.setState({ userPrediction: data });\n    });\n    fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n        this.setState({ confirmed: data });\n    });\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      this.setState({ confirmedAvg: data });\n    });\n    fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n        this.setState({ aggregate: data });\n    });\n    fetch('/login-status/').then(res => res.json()).then(data => {\n        this.setState({ loggedIn: data['logged in'] });\n    });\n  }\n\n  render() {\n    const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.state;\n    if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !loggedIn) return 'Loading...';\n    const isProfile = this.props.isProfile;\n\n    return (\n      <div className=\"chart-container\">\n        <ParentChart\n          forecast={forecast}\n          orgs={orgs}\n          userPrediction={userPrediction}\n          confirmed={confirmed}\n          confirmedAvg={confirmedAvg}\n          aggregate={aggregate}\n          loggedIn={loggedIn}\n          isProfile={isProfile}\n          //category={\"us_daily\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React, { Component } from 'react';\n\nconst pstyle = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '20px'\n}\n\nconst h1style = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '40px'\n}\n\nclass AboutPage extends Component {\n    render() {\n        return(\n            <div>\n                <h1 style={h1style}>About</h1>\n                <h3></h3>\n                <p style={pstyle}> \n                    This site aims to show various past data readings of coronavirus data, as well as future predictions from various sources. \n                    Different forecasts relating to the COVID-19 pandemic are displayed, and users can make their own predictions about the future trajectory of \n                    factors relating to the pandemic such as daily deaths, hospitalizations and cases.\n                    Our mission is to deliver future projections and collected data by providing the best information on the COVID-19 pandemic.\n                </p>\n                <br></br>\n                {/*<h3 style={h1style}>How we Score</h3>*/}\n                <p></p>\n            </div>\n        );  \n    }\n}\n\nexport default AboutPage;","import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n\n    render() {\n        return (\n            <div>\n                <div class=\"container landing\">\n                    <h1 class=\"logo\">COVID-19 Prediction</h1>\n                </div>\n                <div class=\"landing\">\n                    <div class=\"title\"> Welcome<br/>\n                        <button class=\"button\"><b><a href=\"#\">Start</a></b></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './LeaderboardChart.css';\n\nclass LeaderboardChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            userPrediction: null,\n            confirmed: null,\n         };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.setState({userPrediction: this.props.userPrediction, confirmed: this.props.confirmed});\n        this.renderChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // only update chart if the data has changed\n        if (prevProps.userPrediction !== this.props.userPrediction) {\n            this.renderChart();\n        }\n    }\n\n\n    renderChart() {\n        var { userPrediction, confirmed } = this.props;\n\n        //format confirmedData, predictionData\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        var predictionData = userPrediction.map(d => ({\n            date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n            value: d.value\n        }));\n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        var predEndDate = predictionData[predictionData.length - 1].date;\n        const valueMax = 5000;\n\n        /////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 600 - margin.left - margin.right,\n            height = 300 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        var line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        var predLine = predLineGenerator\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"lbConfirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"lbPrediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(predictionData)\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        /*\n        d3.select('#leaderboard').on(\"click\", function() {\n            predCurve.exit().remove();\n        })*/\n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default LeaderboardChart;\n","var colors = {\n    'Columbia': 'rgb(172, 204, 230)',\n    'Georgia Tech': 'rgb(179, 163, 105)',\n    'UCLA': 'rgb(39, 116, 174)',\n    'IHME': 'rgb(87, 175, 85)',\n    'Youyang Gu': 'rgb(196, 129, 14)'\n}\n\nexport default colors;","import React from 'react';\nimport { useTable } from 'react-table';\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport LeaderboardChart from '../LeaderboardChart';\nimport colors from '../../constants/colors';\n\n// Create leaderboard table, consisting of user predictions and official forecasts\nfunction Table({ columns, data, confirmed, orgs, style }) {\n  // Use the state and functions returned from useTable to build UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n    confirmed,\n    orgs,\n    style\n  });\n\n  // Render the UI for table\n  return (\n    <table style={style} className=\"table table-bordered table-hover table-sm\" {...getTableProps()}>\n      <thead className=\"thead-dark\">\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th id={column.render('Header')} {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {<RenderOrgsTable orgs={orgs} confirmed={confirmed} />}\n        {<RenderUsersTable users={data} confirmed={confirmed} />}\n      </tbody>\n    </table>\n  )\n}\n\n\nvar selectedID = \"\"; // var used to keep chart in place if same row was clicked\n// Display user's prediction when user's row is clicked on\nfunction createUserChart(user, confirmed, id) {\n  $('tr').removeClass('clicked');\n  $('#' + id).addClass('clicked');\n  if (selectedID !== id) {\n    $('#predictionChart div').empty(); // reset predictionChart\n  }\n  selectedID = id;\n  ReactDOM.render(<LeaderboardChart userPrediction={user.prediction} confirmed={confirmed} />, document.getElementById('predictionChart'));\n}\n\n\n// Add rows with user data to the leaderboard table\nfunction RenderUsersTable({ users, confirmed }) {\n  return users.map((user, index) => {\n    // ignore null values\n    if (user.mse_score == null) {\n      return;\n    }\n    return (\n       <tr id={user.username + user.date} onClick={() => createUserChart(user, confirmed, user.username + user.date)}>\n          <td>{user.username}</td>\n          <td>{user.date}</td>\n          <td>{user.mse_score.toFixed(2)}</td>\n       </tr>\n    );\n });\n}\n\n\n// Add rows with official forecast data to the leaderboard table\nfunction RenderOrgsTable({ orgs, confirmed }) {\n  return Object.entries(orgs).map( ([key, value]) => {\n    // ignore null values\n    if (value == null) {\n      return;\n    }\n    return (\n      <tr id={key} style={{backgroundColor: colors[key]}}>\n          <td>{key}*</td>\n          <td>Ongoing</td>\n          <td>{value.toFixed(2)}</td>\n      </tr>\n    );\n  });\n}\n\n\n\nclass Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: null,\n      columns: null,\n      confirmed: null,\n      orgs: null\n    }\n  }\n\n  componentDidMount() {\n    fetch('/user-data').then(res => res.json()).then(data => {\n      this.setState({ users: data });\n    });\n    fetch('/us-mse').then(res => res.json()).then(data => {\n      this.setState({ orgs: data });\n    });\n\n    this.setState({ columns: [\n        {\n          Header: 'Username/Official Forecaster',\n          accesor: 'username',\n        },\n        {\n          Header: 'Prediction Date/Status',\n          accesor: 'date',\n        },\n        {\n          Header: 'MSE',\n          accesor: 'mse_score',\n        }\n      ]\n    });\n\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // Table should sort by error when MSE header is clicked on\n    $('#MSE').click(function() {\n      if (this.asc === undefined) {\n          this.asc = true;\n      }\n      var table = $(this).parents('table').eq(0)\n      var rows = table.find('tr:gt(0)').toArray().sort(comparer($(this).index()))\n      this.asc = !this.asc\n    \n      if (!this.asc){\n          rows = rows.reverse()\n      }\n      for (var i = 0; i < rows.length; i++) {\n          table.append(rows[i])\n      }\n    })\n    function comparer(index) {\n        return function(a, b) {\n            var valA = getCellValue(a, index), valB = getCellValue(b, index)\n            return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.toString().localeCompare(valB)\n        }\n    }\n    function getCellValue(row, index){ \n        return $(row).children('td').eq(index).text() \n    }\n\n    // Trigger click events to get orgs and users sorted together\n    $('#MSE').trigger(\"click\");\n    $('#MSE').trigger(\"click\");\n  }\n\n\n  render() {\n    const tableStyle = {\n      width: \"50%\",\n      textAlign: \"center\",\n      overflowY: \"scroll\"\n    };\n    \n    const chartStyle = {\n      position: \"fixed\",\n      width: \"50%\",\n      left: \"50%\",\n    };\n\n    $(\"#delete-btn\").remove();\n\n    const { users, columns, confirmed, orgs } = this.state;\n    if (!users || !columns || !confirmed || !orgs) return 'Loading...';\n\n    return (\n      <div>\n        <br></br>\n        <h2 style={{marginBottom: 0}}>Top Forecasts</h2>\n        <small>* indicates an official forecaster as labelled by the CDC</small>\n        <br></br>\n        <br></br>\n        <div className=\"d-flex flex-row\">>\n          <Table id=\"leaderboard\" columns={columns} data={users} confirmed={confirmed} orgs={orgs} style={tableStyle} />\n          <div id=\"predictionChart\" className=\"text-center\" style={chartStyle}>Click on a row to display a user's prediction!</div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Leaderboard;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, getAllDataPoints, sortDictByDate, sortStringDates } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const userStatus = this.props.userStatus;\n        console.log(userStatus)\n        if (userStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.chartRef.current.innerHTML = \"Please log in\"\n        }\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const category = this.state.category;\n        var compiledData = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n\n        console.log(\"USER PREDICTION\");\n        console.log(userPrediction);\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n        }\n\n        predictionData = sortDictByDate(predictionData);\n        console.log(\"PREDICTION DATA\");\n        console.log(predictionData);\n\n        console.log(predictionData)\n        //get most recent prediction\n        var dates = sortStringDates(Object.keys(userPrediction))\n        const mostRecentPred = predictionData[dates[dates.length - 1]]\n        console.log(\"MOST RECENT PRED\");\n        console.log(mostRecentPred)\n        //push to compiledData\n        compiledData = [confirmedData, mostRecentPred]\n        console.log(dates[0])\n        console.log(d3.timeFormat(\"%B %d, %Y\")(dates[0]))\n    \n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        const valueMax = 5000;\n        \n\n        /*dateList.map(d => {\n            dates.push({\n                date: d\n            })\n        })*/\n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //DRAW TODAY LINE//\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        console.log(today);\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"display\", \"none\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(legendString[index]);\n                    })\n                    .attr(\"id\", \"circle\")\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"display\", \"none\");\n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"value\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"date\")\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"transform\", \"rotate(-90)\")\n        \n        svg\n                .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr(\"id\", \"interactive-area\")\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"display\", \"none\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"block\");\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var todayDate = new Date();\n                        todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0,10));\n                        var date = x.invert(d3.mouse(this)[0])\n                        if (+date > +todayDate) {\n                            date = todayDate;\n                        }\n                        const index = d3.bisectRight(dates, date);\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index === 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                        ////////////////////\n\n\n\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.length === 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(d, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d[index - 1];\n                                }\n                                const b = d[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) === +data.date || +d3.timeDay.ceil(date) === +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                        element\n                                                .select('#value')\n                                                .style(\"display\", \"block\")\n                                                .text(Math.round(data.value))\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                            \n                                        element\n                                                .select(\"#date\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`)\n                                                .text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                        return \"translate(0,0)\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                element                \n                                    .selectAll(\"text\")\n                                        .style(\"display\", \"none\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"display\", \"none\");\n                            });\n                    })\n                    .on(\"click\", function() {\n                        var date = x.invert(d3.mouse(this)[0])\n                        const index = d3.bisectRight(dates, date);\n                        console.log(dates)\n                        console.log(date)\n                        console.log(index)\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index === 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                    })\n                \n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n","import React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            userStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ userStatus: data });\n            console.log(data);\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, userStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <UserPredictionChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default UserPredictionChartContainer;","import React from 'react';\nimport UserPredictionChartContainer from '../../containers/UserPredictionChartContainer';\n\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    /*fetch('/user').then(res => res.json()).then(data => {\n      this.setState({ user: data });\n    });*/\n  }\n\n  \n\n  renderUser() {\n    return (\n      <div>\n        <h3>My Predictions</h3>\n        <UserPredictionChartContainer/>\n      </div>\n\n        /*<div>\n            <p><b>Name: </b>{ this.state.user['name'] }</p>\n            <p><b>Poll score: </b>{ this.state.user['score'] }</p>\n            <p><b>Country/Location: </b></p>\n            <p><b>Bio: </b></p>\n\n            <p>Edit your page:</p>\n            <form action='/action' method='POST'>\n            <input type=\"text\" name=\"bio\" placeholder=\"Bio...\" />\n            <input type=\"text\" name=\"location\" placeholder=\"Location...\" />\n            <button type='submit'>Create</button>\n            </form>\n          \n        </div>*/\n    );\n  }\n\n  render() {\n    const { user } = this.state;\n    //if (!user) return 'Loading...';\n\n    return (\n        <div>\n            {this.renderUser()}\n        </div>\n    );\n  }\n}\n  \nexport default ProfilePage;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction, getLastDate, getLastValue } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { timeDay } from 'd3';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0] + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n\n        var predictionData = [];//where we will store formatted userPrediction\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed)\n        if (+getLastDate(confirmedData) != +confirmedLastDate) {\n            confirmedData.push({\n                date: confirmedLastDate,\n                value: confirmedLastVal\n            })\n        }\n        else {\n            confirmedLastVal = getLastValue(confirmedData);\n        }\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n\n        var aggregateData = reformatData(aggregate);\n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            var idx = o.indexOf(\"(\");\n            models.push(o.substring(0, idx - 1));\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d){ return color(d)}))\n\n        \n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d, index){ return color(names[index])})\n                .text(function(d){console.log(\"D TEXT\"); console.log(d); return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", modelClassNames[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(legendString[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n        console.log(compiledData);\n        const tooltipArea = svg\n        .append(\"g\")\n        .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n        .attr(\"id\", \"tooltip-line\")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"0.5px\")\n        .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n            //  .style(\"background-color\", \"white\")\n            // .style(\"border\", \"solid\")\n            // .style(\"border-width\", \"2px\")\n            // .style(\"border-radius\", \"5px\")\n            // .style(\"padding\", \"5px\")\n            .style(\"position\", \"absolute\")\n            .style(\"display\", \"block\")\n            .style(\"left\", \"10px\")\n            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                        .selectAll(\".mouse-per-line\")\n                        .data(compiledData)\n                        .enter()\n                        .append(\"g\")\n                        .attr(\"class\", \"mouse-per-line\");\n\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(names[index]);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n            .append(\"svg:rect\")\n            .attr('width', width)\n            .attr('height', height)\n            .attr('fill', 'none')\n            .attr('pointer-events', 'all')\n            //.style(\"cursor\", \"pointer\")\n            .on('mouseout', function() { // on mouse out hide line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line circle\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line text\")\n                .style(\"opacity\", \"0\")\n                tooltipBox.style(\"display\", \"none\")\n            })\n            .on('mouseover', function() { // on mouse in show line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"1\");\n                tooltipBox.style(\"display\", \"block\")\n            })\n            .on('mousemove', function() { // mouse moving over canvas\n                var mouse = d3.mouse(this);\n                var xCoord = mouse[0];\n                var yCoord = mouse[1];\n                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                    chart.attr(\"cursor\", \"pointer\");\n                }\n                else {\n                    chart.attr(\"cursor\", \"default\");\n                }\n                d3\n                    .select(\"#tooltip-line\")\n                    .attr(\"d\", function() {\n                        var d = \"M\" + xCoord + \",\" + height;\n                        d += \" \" + xCoord + \",\" + 0;\n                        return d;\n                    });\n                tooltipBox\n                    .style('left', `${d3.event.pageX + 20}px`)\n                    .style('top', `${d3.event.pageY + 20}px`)\n                d3\n                    .selectAll(\".mouse-per-line\")\n                    .attr(\"transform\", function(d, i) {\n                        if (d.data.length === 0) {return;}\n                        var date = x.invert(xCoord);\n                        var value = -1;\n                        d.data.map(d => {\n                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                value = d.value;\n                            }\n                        })\n                        var element = d3.select(this);\n                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                        if (value >= 0) {\n                            if(textBox.empty()) {\n                                textBox = tooltipBox.append(\"div\")\n                                                    .attr(\"class\", d.name)\n                                                    .style(\"padding-left\", \"10px\")\n                                                    .style(\"padding-right\", \"10px\")\n                                                    .style(\"background-color\", color(names[i]))\n                                                    .style(\"color\", \"white\");\n\n                            }\n                            else {\n                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                            }\n                            element.select(\"circle\")\n                                    .style(\"opacity\", \"1\");\n                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                        }\n                        else {\n                            if(!textBox.empty()) {\n                                textBox.remove();\n                            }\n                            element\n                                    .select(\"circle\")\n                                    .style(\"opacity\", \"0\");\n                        }\n                        \n                });\n            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            compiledData[2].data = predictionData;\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n       ///////////////////////////////////////////////////////////////// \n        var legendElement = document.querySelector(\"#legend\");\n        const legendCompleteWidth = legendElement.getBoundingClientRect().width;\n        const legendSingleHeight = 25;\n        var legendConfirmed = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendAggregate = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendPrediction = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 2)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendGeorgiaTech = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 3)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendIhme = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 4)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendYouyang = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 5)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendColumbia = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 6)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendUcla = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 7)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        legendConfirmed.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#confirmed\").style(\"stroke\", color(names[0]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendAggregate.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#aggregate\").style(\"stroke\", color(names[1]));\n                         })\n                         .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendPrediction.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#your-line\").style(\"stroke\", color(names[2]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendGeorgiaTech.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#gt\").style(\"stroke\", color(names[3]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendIhme.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ihme\").style(\"stroke\", color(names[4]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendYouyang.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#youyang\").style(\"stroke\", color(names[5]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendColumbia.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#columbia\").style(\"stroke\", color(names[6]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendUcla.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ucla\").style(\"stroke\", color(names[7]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        \n    }\n\n    renderChart() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0] + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 230;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                        .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        if (+getLastDate(confirmedData) != +confirmedLastDate) {\n            confirmedData.push({\n                date: confirmedLastDate,\n                value: confirmedLastVal\n            })\n        }\n        else {\n            confirmedLastVal = getLastValue(confirmedData);\n        }\n        \n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedLastDate; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            var idx = o.indexOf(\"(\");\n            models.push(o.substring(0, idx - 1));\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"circle\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d, i){ return color(names[i])})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n        var legendElement = document.querySelector(\"#legend\");\n        const legendCompleteWidth = legendElement.getBoundingClientRect().width;\n        const legendSingleHeight = 25;\n        /*var legendArea = legend.append(\"rect\")\n                                .attr(\"width\", legendCompleteWidth)\n                                .attr(\"height\", legendCompleteHeight)\n                                .attr(\"x\", width + 40)\n                                .attr(\"y\", 10)\n                                .attr(\"fill\", \"none\")\n                                .style(\"pointer-events\",\"visible\");*/\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        //display user prediction\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        \n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", modelClassNames[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        console.log(confirmedData);\n        console.log(confirmed)\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length === 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(models[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            //  .style(\"background-color\", \"white\")\n                            // .style(\"border\", \"solid\")\n                            // .style(\"border-width\", \"2px\")\n                            // .style(\"border-radius\", \"5px\")\n                            // .style(\"padding\", \"5px\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, i) {\n                            return color(names[i]);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                                tooltipBox.style(\"display\", \"none\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                tooltipBox.style(\"display\", \"block\")\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                tooltipBox\n                                    .style('left', `${d3.event.pageX + 20}px`)\n                                    .style('top', `${d3.event.pageY + 20}px`)\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length === 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        var value = -1;\n                                        d.data.map(d => {\n                                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                                value = d.value;\n                                            }\n                                        })\n                                        var element = d3.select(this);\n                                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                                        if (value >= 0) {\n                                            if(textBox.empty()) {\n                                                textBox = tooltipBox.append(\"div\")\n                                                                     .attr(\"class\", d.name)\n                                                                     .style(\"padding-left\", \"10px\")\n                                                                     .style(\"padding-right\", \"10px\")\n                                                                     .style(\"background-color\", color(names[i]))\n                                                                     .style(\"color\", \"white\");\n\n                                            }\n                                            else {\n                                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                                            }\n                                            element.select(\"circle\")\n                                                    .style(\"opacity\", \"1\");\n                                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                        }\n                                        else {\n                                            if(!textBox.empty()) {\n                                                textBox.remove();\n                                            }\n\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"opacity\", \"0\");\n                                        }\n                                        \n                                });\n                            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        // const focusHeight = 100;\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n                \n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            focusPredCurve.datum(filtered)\n                            .attr(\"d\", focusPredLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n            compiledData[2].data = predictionData;\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        var legendConfirmed = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendAggregate = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendPrediction = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 2)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendGeorgiaTech = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 3)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendIhme = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 4)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendYouyang = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 5)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendColumbia = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 6)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendUcla = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", width + 40)\n                .attr(\"y\", 10 + legendSingleHeight * 7)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        legendConfirmed.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#confirmed\").style(\"stroke\", color(names[0]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendAggregate.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#aggregate\").style(\"stroke\", color(names[1]));\n                         })\n                         .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendPrediction.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#your-line\").style(\"stroke\", color(names[2]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendGeorgiaTech.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#gt\").style(\"stroke\", color(names[3]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendIhme.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ihme\").style(\"stroke\", color(names[4]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendYouyang.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#youyang\").style(\"stroke\", color(names[5]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendColumbia.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#columbia\").style(\"stroke\", color(names[6]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendUcla.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ucla\").style(\"stroke\", color(names[7]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n    }\n        \n    render() {\n        return(<div>\n            <h2>US Daily Deaths</h2>\n            <p>Daily deaths is the best indicator of the progression of the pandemic.</p>\n            {/*<p>Current total: {this.confirmedData.value}</p>*/}\n            <div ref={this.chartRef}></div>\n            <div class=\"tooltip-box\"></div>\n            <div class=\"speech-bubble left\">shift or resize the gray box to change the zoom level</div>\n            </div>);\n    }\n}\n\nexport default InteractiveChart;","import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, getLastValue, organizeData } from '../../utils/data';\n\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            confirmedLastVal: null,\n            confirmedLastDate: null,\n            userPrediction: null,\n            aggregate: null,\n            mse: null,\n            user_mse: null,\n            loginStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n        fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n            console.log(\"USER PREDICTION\");\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n            this.setState({ \n                confirmedLastVal: Object.values(data)[Object.values(data).length - 1],\n                confirmedLastDate: Object.keys(data)[Object.values(data).length - 1]\n             });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n            //console.log(data);\n        });\n        fetch('/us-mse').then(res => res.json()).then(data => {\n            this.setState({ mse: data });\n        });\n        fetch('/user-mse').then(res => res.json()).then(data => {\n            this.setState({ user_mse: data });\n            console.log(\"USER MSE\");\n            console.log(data);\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ loginStatus: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse, loginStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !confirmedLastVal|| !confirmedLastDate || !aggregate || !mse || !loginStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <InteractiveChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedLastVal={confirmedLastVal}\n                    confirmedLastDate={confirmedLastDate}\n                    aggregate={aggregate}\n                    mse={mse}\n                    loginStatus={loginStatus}\n                    //userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;","import React from \"react\";\nimport L from \"leaflet\";\nimport statesData from './us-states.json';\nimport countriesData from './countries.json';\n//import './map.css'\n\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst mapStyle = (feature) => {\n  return ({\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n    fillColor: \"#FFEDA0\"\n\n  });\n}\n\nclass Mapportal extends React.Component {\n  componentDidMount() {\n    // create map\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [\n        L.tileLayer(\"https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\",\n        {\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n          id: \"dark-v10\"\n        })\n      ]\n    });\n\n    this.geojson = L.geoJson(statesData, {\n      style: mapStyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    this.countries = L.geoJson(countriesData, {\n\t\tstyle: mapStyle,\n\t\tonEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    \n    var overlay = {\n\t\t\t\"Countries\": this.countries,\n\t\t\t\"States\" : this.geojson\n\t};\n  L.control.layers(overlay).addTo(this.map);\n\n\n    // add layer\n    this.layer = L.layerGroup().addTo(this.map);\n  }\n  onEachFeature = (feature, layer) => {\n\tlayer.bindTooltip(feature.properties.name.toString(),{noHide:true}).openTooltip();\n    layer.on({\n      mouseover: this.highlightFeature,\n      mouseout: this.resetHighlight\n    });\n    layer.on(\"click\",function(e){\n      // this gets the id for each country, and we can use that to redirect to different pages since each \n      // json layer has different ids. the states are 1-50, and the countries are their official code\n      window.alert(layer.feature.id);\n  });\n  }\n  highlightFeature = (e) => {\n    var layer = e.target;\n\n    layer.setStyle({\n      fillColor: \"#FFEDA0\",\n      weight: 5,\n      color: \"#666\",\n      dashArray: \"\",\n      fillOpacity: 0.7\n    });\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n    //layer.bringToFront();\n\n  \n  }\n  resetHighlight = (event) => {\n\tthis.geojson.resetStyle(event.target);\n\tthis.countries.resetStyle(event.target);\n  }\n\n  render() {\n    return <div id=\"map\" style={style} />;\n  }\n}\n\nexport default Mapportal;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './Login.css';\nimport { Redirect } from \"react-router\";\n\n\nclass Login extends React.Component{\n    constructor(props) {\n      super(props)\n      this.state = { username: '', password: '', loggedinstate: '', loginStatus: false }\n    }  \n      \n    componentDidMount(){\n      //this.isLoggedIn();\n    }\n\n    saveLogin(username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n        \n    }\n\n    wasSucess = () => {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{ method: 'GET'})\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          this.setState({loginStatus: data['status']});\n          resolve(data);\n        });\n      })\n    }\n    \n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 200)\n      })\n\t\t}\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n  \n    }\n    \n    async handleSubmit(event) {\n      console.log(\"submitting\");\n      event.preventDefault();\n      await this.saveLogin(this.state.username, this.state.password);\n      /*await this.wasSucess().then(status => {\n        console.log(status);\n      });*/\n      await this.updateLoginState();\n    }\n\n\n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)} className='form-group'>\n          <h1>Sign In</h1>\n          <label className='spanStyle'><b>Username</b></label>\n          <br></br>\n          <input\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span className='spanStyle'><b>Password</b></span>\n          <br></br>\n          <input\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n            required\n          />\n          <br></br>\n            \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from \"react-router\";\nimport '../LogIn/Login.css';\n\nclass SignUp extends React.Component{\n    constructor(props) {\n       super(props)\n      this.state = { nam:'', email: '', username: '', password: '', loginStatus: false }\n    }\n\n    saveLogin(nam, email, username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/signup/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"name\": nam, \"email\": email, \"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n    }\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'nam'){\n        this.setState({ nam: event.target.value});\n      }\n      if (name === 'email'){\n        this.setState({ email: event.target.value});\n      }\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n\n    }\n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 300)\n      })\n    }\n    \n    async handleSubmit(event) {\n      event.preventDefault();\n      await this.saveLogin(this.state.nam, this.state.email, this.state.username, this.state.password);\n      this.updateLoginState();\n    }\n    \n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <h1>Sign Up</h1>\n          <span className='signupSpan'><b>Name</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.nam}\n            onChange={this.handleChange.bind(this)}\n            name='nam'\n          />\n          <br></br>\n          <span className='signupSpan'><b>Email</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.email}\n            onChange={this.handleChange.bind(this)}\n            name='email'\n          />\n          <br></br>\n          <span style={{paddingRight:'280px'}}><b>Username</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span style={{paddingRight:'285px'}}><b>Password</b></span>\n          <br></br>\n          <input \n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n          />\n          <br></br>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default SignUp;","import React from 'react';\nimport './App.css';\n//import '/node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom'\nimport Navbar from './components/Navbar';\nimport ChartContainer from './containers/ChartContainer';\n// import newDeathsContainer from './containers/newDeathsContainer';\nimport LandingPage from './pages/LandingPage';\nimport AboutPage from './pages/AboutPage';\nimport Leaderboard from './components/Leaderboard';\n// import MarketChart from './components/MarketChart';\nimport ProfilePage from './pages/ProfilePage';\nimport InteractiveChartContainer from './containers/InteractiveChartContainer';\nimport UserPredictionChartContainer from './containers/UserPredictionChartContainer';\nimport * as ROUTES from \"./constants/routes\";\nimport 'leaflet/dist/leaflet.css';\nimport Mapportal from './components/Mapportal';\nimport Login from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path={ROUTES.LANDING} >\n              <br></br>\n            <div class=\"dropdown\">\n            <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Country\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              <a class=\"dropdown-item\" href=\"/\">USA</a>\n              \n            </div>\n          </div><br></br>\n              <InteractiveChartContainer/>\n              </Route>\n            {/* <Route exact path={ROUTES.US_NATIONAL_CUM} component={ChartContainer} />\n            <Route exact path={ROUTES.US_NATIONAL_INC} component={newDeathsContainer} /> */}\n            <Route exact path={ROUTES.MAP_PORTAL} component={Mapportal} />\n            <Route exact path={ROUTES.LEADERBOARD} component={Leaderboard} />\n            {/* <Route exact path={ROUTES.MARKET} component={MarketChart} /> */}\n            <Route exact path={ROUTES.PROFILE} component={ProfilePage} />\n            <Route exact path={ROUTES.SIGN_IN} component={Login} />\n            <Route exact path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route exact path={ROUTES.ABOUT} component={AboutPage} />\n            <Route exact path=\"/temp\" render={(props) => <ChartContainer isProfile={true}/>}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/COVIDforecasts-logo-white.e6ddd865.png\";"],"sourceRoot":""}