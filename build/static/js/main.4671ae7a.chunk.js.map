{"version":3,"sources":["components/Navbar/index.js","constants/routes.js","utils/data.js","components/InteractiveChartTemp/index.js","components/ParentChart/index.js","containers/ChartContainer/index.js","pages/AboutPage/index.js","pages/LandingPage/index.js","components/LeaderboardChart/index.js","components/Leaderboard/index.js","components/UserPredictionChart/index.js","containers/UserPredictionChartContainer/index.js","pages/ProfilePage/index.js","components/InteractiveChart/index.js","containers/InteractiveChartContainer/index.js","components/Mapportal/index.js","components/LogIn/index.js","components/SignUp/index.js","App.js","serviceWorker.js","index.js","components/Navbar/COVIDforecasts-logo-white.png"],"names":["Navbar","props","changeTab","tabID","setState","console","log","state","active","isLoggedIn","fetch","then","response","json","data","loggedinstate","logoutbutton","loginbutton","signupbutton","bind","this","method","headers","className","href","id","data-toggle","exact","activeClassName","to","onClick","saveLogout","src","covidforecastslogo","style","width","marginTop","type","data-target","aria-controls","aria-expanded","aria-label","renderDropdown","React","Component","organizeData","orgs","Object","keys","results","i","length","forecast","dates","target_end_date","values","value","result","forEach","key","push","clamp","a","b","c","Math","max","min","getMostRecentPrediction","sort","Date","reformatData","map","date","d3","reformatPredData","d","substring","defined","findYatX","x","path","startX","getXY","len","point","getPointAtLength","y","start","end","getTotalLength","mid","currPoint","currPointX","getAllDataPoints","pathNode","xAxis","yAxis","startDate","endDate","invert","offset","getDataPointsFromPath","predictionData","lastPredDate","cleanData","predStartDate","idxOfStartDate","f","left","splice","getLastDate","createDefaultPrediction","predEndDate","defaultData","currDate","InteractiveChartTemp","modal","document","createElement","modalContent","text","innerText","signinBtn","onclick","window","location","signupBtn","appendChild","querySelector","append","chart","renderChart","userPrediction","confirmed","confirmedAvg","aggregate","loggedIn","height","marginBottom","appendModal","domain","svg","confirmedData","confirmedTemp","confirmedLastVal","aggregateData","forecastData","line","curve","predLine","labels","concat","color","range","confirmedBoundary","defs","confirmedArea","attr","predictionArea","datum","selectAll","enter","index","filter","cleanPrediction","filteredData","predictionLine","forecastPaths","querySelectorAll","confirmedPath","aggregatePath","compiledData","drag","on","pos","round","node","category","body","JSON","stringify","savePrediction","call","getElementById","event","target","display","focus","focusX","focusY","focusHeight","nice","brush","extent","selection","newX","select","gb","move","defaultSelection","focusLine","focusPredLine","createFocusContext","ParentChart","chartRef","createRef","confirmedStartdate","setUpChart","confirmedStartDate","isProfile","predLength","margin","current","yMax","currMax","ChartContainer","res","pstyle","textAlign","marginLeft","fontSize","h1style","AboutPage","LeaderboardChart","prevProps","prevState","legendString","legend","mainArea","lineGenerator","predLineGenerator","ref","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","RenderTable","users","user","mse_score","ReactDOM","prediction","createChart","username","toFixed","Leaderboard","Header","accesor","overflowY","position","UserPredictionChart","userStatus","innerHTML","p","sortedDict","dateObj","sortDictByDate","sortedDates","sortStringDates","mostRecentPred","today","toISOString","todayMarker","tooltip","mousePerLine","todayDate","newDate","pred","mouse","xCoord","element","floor","ceil","UserPredictionChartContainer","ProfilePage","renderUser","InteractiveChart","loginStatus","renderChartUnregistered","confirmedLastDate","mse","orgIndices","sortable","err","sortedOrgs","j","toString","tempForecast","Array","k","w","h","confirmedMax","forecastMax","yAxisMax","models","o","idx","indexOf","names","modelClassNames","confirmedLine","confirmedAreaEndX","confirmedAreaEndY","slice","getElementsByClassName","yourLine","name","lastDate","m","getBoundingClientRect","drawingInstruction","selectCircle","focusPredCurve","tooltipArea","tooltipBox","yCoord","xLowerBoundary","pageX","pageY","textBox","empty","html","remove","deleteButton","deletePrediction","filtered","confirmedAreaWidth","clickAreaWidth","class","InteractiveChartContainer","user_mse","mapStyle","feature","weight","opacity","dashArray","fillOpacity","fillColor","Mapportal","onEachFeature","layer","bindTooltip","properties","noHide","openTooltip","mouseover","highlightFeature","mouseout","resetHighlight","e","alert","setStyle","L","Browser","ie","opera","edge","bringToFront","geojson","resetStyle","countries","center","zoom","layers","tileLayer","maxZoom","attribution","geoJson","statesData","addTo","countriesData","overlay","control","layerGroup","Login","wasSucess","Promise","resolve","reject","updateLoginState","setTimeout","password","preventDefault","saveLogin","onSubmit","handleSubmit","onChange","handleChange","required","SignUp","nam","email","paddingRight","App","aria-haspopup","aria-labelledby","component","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.4671ae7a.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport covidforecastslogo from './COVIDforecasts-logo-white.png'\nimport './Navbar.css'\n\nclass Navbar extends React.Component {\n  \tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tloggedinstate: '', \n\t\t\tlogoutbutton: null, \n\t\t\tloginbutton: null, \n\t\t\tsignupbutton: null,\n\t\t}\n\t\tthis.isLoggedIn = this.isLoggedIn.bind(this)\n\t}\n\n\t/*\n\tisLoggedIn() {\n\t\tfetch('/user-status').then(res => res.json()).then(data => {\n\t\t\tthis.setState({ users: data });\n\t\t});\n\t}*/\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"nav bar loading\");\n\t\tthis.isLoggedIn();\n\t\tthis.setState({'active': 'home'});\n\t}\n\n\tchangeTab = (tabID) => {\n\t\tthis.setState({'active': tabID});\n\t\tconsole.log(\"ACTIVE TAB\");\n\t\tconsole.log(this.state.active);\n\t}\n\n\tasync saveLogout() {\n\t\tfetch('/logout/',{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\t\t\n\t}\n\n\tisLoggedIn = () => {\n\t\tfetch('/login-status/')\n\t\t.then((response) => response.json())\n\t\t.then((data) => this.setState({loggedinstate: data}));\n\t}\n\n\n\trenderDropdown(){\n\t\tif (this.state.loggedinstate['logged in']) {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown ml-auto\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n\t\t\t\t\t\t\t\tHello {this.state.loggedinstate['name']}!\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu dropdown-menu-left\">\n\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.PROFILE}>Profile</NavLink>\n\t\t\t\t\t\t\t<NavLink className=\"dropdown-item\" to={ROUTES.LANDING}><a className=\"dropdown-item\" onClick={() => this.saveLogout()} href='/'>Sign Out</a></NavLink>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">Welcome</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu\">\n\t\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.SIGN_UP}>Sign Up</NavLink>\n\t\t\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"dropdown-item\" to={ROUTES.SIGN_IN}>Sign In</NavLink>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n  \trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n\t\t\t\t<a className=\"navbar-brand\" href='/'>\n\t\t\t\t\t<img id='logo' src={covidforecastslogo} style={{width:450, marginTop: -10}}></img>\n\t\t\t\t</a>\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t\t</button>\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n\t\t\t\t\t<div className=\"navbar-nav\">\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LANDING}>Home</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.ABOUT}>About</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LEADERBOARD}>Top Forecasts</NavLink>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.renderDropdown()}\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n  \t}\n}\n\nexport default Navbar;\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const ABOUT = '/about';\nexport const PROFILE = '/profile';\nexport const MAP_PORTAL = '/map-portal';\nexport const MARKET = '/market';\nexport const LEADERBOARD = '/leaderboard';\nexport const US_NATIONAL_CUM = '/us-national-cumulative';\nexport const US_NATIONAL_INC = '/us-national-incident';\nexport const US_STATE = '/us-state';\n","import * as d3 from 'd3'\n\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n  return result;\n};\n\nexport const organizeData = (data) => {\n  var orgs = Object.keys(data);\n  var results = [];\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n}\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n  while (current <= end) {\n      dateArray.push(new Date(current).toISOString().slice(0,10));\n      current = addDays(current, 1);\n  }\n  return dateArray;\n}\n\nexport const clamp = (a, b, c) => { \n  return Math.max(a, Math.min(b, c)) \n}\n\nexport const formatValue = (value) => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n\n  g\n      .style(\"display\", null)\n      .style(\"pointer-events\", \"none\")\n      .style(\"font\", \"10px sans-serif\");\n\n  const path = g.selectAll(\"path\")\n    .data([null])\n    .join(\"path\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\");\n\n  const text = g.selectAll(\"text\")\n    .data([null])\n    .join(\"text\")\n    .call(text => text\n      .selectAll(\"tspan\")\n      .data((value + \"\").split(/\\n/))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => `${i * 1.1}em`)\n        .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n        .text(d => d));\n\n  const {x, y, width: w, height: h} = text.node().getBBox();\n\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n}\n\nexport const sortDictByDate = (data) => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d]\n  })\n  return sortedDict;\n}\n//pass in list of string dates, return string dates y-m-d\nexport const sortStringDates = (data) => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n}\n\nexport const getMostRecentPrediction = (data) => {\n  if (Object.keys(data).length === 0) return null;\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  return data[mostRecentDate]\n}\n\nexport const reformatData = (data) => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n}));\n}\n\nexport const reformatPredData = (data) => {\n  return data.map(d => ({\n      date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n      value: d.value,\n      defined: d.defined\n      })\n  );\n}\n//returns y coordinate at given x \n/*export const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {return null}\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y];\n  }\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.01;\n    }\n    else {\n      console.log(currPointX);\n      result = currPoint[1];\n      break;\n    }\n  }\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start)[1];\n  }\n  return result;\n}*/\n\nexport const findYatX = (x, path, startX) => {\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y, len];\n  }\n  var start = startX;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.001; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.001;\n    }\n    else {\n      result = currPoint;\n      break;\n    }\n  }\n  if (result === 0) {\n    result = getXY(start);\n  }\n  return result;\n}\n\n//for confirmedData, forecastData, aggregateData\nexport const getAllDataPoints = (pathNode, xAxis, yAxis, startDate, endDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n  while (+date <= +endDate) {\n    var x = xAxis(date);\n    var point = findYatX(x, pathNode, startX);\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1])\n    });\n    startX = point[2];\n    date = d3.timeDay.offset(date, 1);\n  }\n  return data;\n}\nexport const getDataPointsFromPath = (predictionData, pathNode, xAxis, yAxis, lastPredDate) => {\n  var date = predictionData[0].date;\n  var startX = 0;\n  for (var i = 0; i < predictionData.length; i++) {\n    if (+predictionData[i].date > +lastPredDate) {\n      break;\n    }\n    if (predictionData[i].defined === 0) {\n      date = predictionData[i].date;\n      var point = findYatX(xAxis(date), pathNode, startX);\n      predictionData[i].defined = true;\n      predictionData[i].value = yAxis.invert(point[1]);\n      startX = point[2];\n    }\n  }\n  return predictionData;\n}\n\nexport const cleanData = (data, predStartDate, value) => {\n  var idxOfStartDate = d3.bisector(f => f.date).left(data, predStartDate);\n  if (data.length > 0 && +data[idxOfStartDate].date === +predStartDate) {\n    data[idxOfStartDate].value = value;\n  }\n  else {\n    data.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: value\n    });\n  } \n  return data.splice(idxOfStartDate, data.length);\n}\n\nexport const getLastValue = (data) => {\n  return data[data.length - 1].value;\n}\n\nexport const getLastDate = (data) => {\n  return data[data.length - 1].date;\n}\n\nexport const color = (names) => {\n  d3\n    .scaleOrdinal()\n    .domain(names)\n    .range(d3.schemeTableau10);\n}\n\nexport const createDefaultPrediction = (predStartDate, predEndDate) => {\n  var defaultData = [];\n  var currDate = predStartDate;\n  //var defined = true;\n  //var value = confirmedData[confirmedData.length - 1].value;\n  \n  //create defaultPredictionData\n  while(+currDate <= +predEndDate) {\n      defaultData.push({date: currDate, value: 0, defined: 0});\n      currDate = d3.timeDay.offset(currDate, 1);\n  }\n  return defaultData;\n}\n\nexport const cleanPrediction = (data, predStartDate, predEndDate, confirmedLastVal) => {\n  if (+data[0].date !== +predStartDate) {\n    console.log(\"needs to be reformatted\")\n    data = reformatPredData(data);\n    var currDate = d3.timeDay.offset(getLastDate(data), 1);\n    data = data.concat(createDefaultPrediction(currDate, predEndDate));\n  }\n  data = data.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n  data[0].value = confirmedLastVal;\n  data[0].defined = true;\n  return data;\n}\n\n\nexport const savePrediction = (data, category) => {\n  fetch('/update/',{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\"data\": data, \"category\": category}),\n  });\n}\n\nexport const createFocusContext = (svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color) => {\n  const focusHeight = 100;\n  const focusMargin = 50;\n  var focus = svg\n                  .append(\"g\")\n                      .attr(\"viewBox\", [0, 0, width, focusHeight])\n                      .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                      //.attr(\"width\", width + 100)\n                      //.attr(\"height\", height)\n                      .style(\"display\", \"block\")\n\n  var focusX = d3\n                  .scaleTime()\n                  .domain(x.domain())\n                  .range([0, width]);\n  const focusY = d3\n                  .scaleLinear()\n                  .domain(y.domain())\n                  .range([focusHeight - focusMargin, 0])\n                  .nice();\n  \n  var focusXAxis = focus\n                        .append(\"g\")\n                        .attr(\"transform\", `translate(0,${focusHeight - marginBottom})`)\n                        .call(d3.axisBottom(focusX));\n  const brush = d3.brushX()\n                  .extent([[0, 0], [width, focusHeight - marginBottom]])\n                  .on(\"brush\", brushed)\n                  .on(\"end\", brushended);\n\n  const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n\n  const focusLine = d3.line()\n                      .curve(d3.curveCatmullRom)\n                      .x(function(d) {return x(d.date)})\n                      .y(function (d) {return focusY(d.value)})\n  \n  const focusPredLine = d3.line()\n                          .curve(d3.curveBasis)\n                          .defined(d => d.defined)\n                          .x(function(d) { return x(d.date) })\n                          .y(function(d) { return focusY(d.value) })        \n  focus.append(\"path\")\n      .datum(confirmedData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[1]))\n  \n  focus.append(\"path\")\n      .datum(aggregateData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[2]))\n\n  var contextPredCurve = focus.append(\"path\")\n                              .datum(predictionData)\n                              .attr(\"d\", focusPredLine)\n                              .attr(\"class\", \"context-curve\")\n                              .attr(\"stroke\", color(labels[0]))\n  console.log(labels);\n  focus.selectAll(\".forecast-small\")\n        .data(forecastData)\n        .enter()\n        .append(\"path\")\n            .attr(\"d\", line)\n            .attr(\"class\", \"context-curve\")\n            .style(\"stroke\", (f, index) => color(labels[3 + index]))\n            .style(\"stroke-width\", \"2px\");\n\n  function brushed() {\n      if (d3.event.selection) {\n          var extent = d3.event.selection;\n          x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n          xAxis.call(d3.axisBottom(x))\n          var newX = x(getLastDate(confirmedData));\n          newX = newX < 0 ? 0 : newX;\n          d3\n              .select(\"#prediction-clip\")\n              .select(\"rect\")\n                  .attr(\"width\", width - newX)\n                  .attr(\"x\", newX);\n          d3\n                  .select(\"#confirmed-clip\")\n                  .select(\"rect\")\n                      .attr(\"width\", newX)\n\n          svg\n              .selectAll(\".line\")\n              .attr('d', line)\n\n          svg\n              .select(\"#your-line\")\n              .attr(\"d\", predLine)\n          \n          svg\n              .select(\"#draw-guess\")\n              .attr(\"x\", newX + (width - newX) / 2);\n          svg\n              .select(\"#pointer\")\n              .selectAll(\"circle\")\n                  .attr(\"cx\", newX);\n      }\n  }\n  \n  function brushended() {\n      if (!d3.event.selection) {\n          gb.call(brush.move, defaultSelection);\n      }\n\n  }\n  const gb = focus\n                  .call(brush)\n                  .call(brush.move, defaultSelection);  \n}","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport {cleanPrediction, createFocusContext, savePrediction, getLastDate, createDefaultPrediction, getLastValue, cleanData, clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport './InteractiveChartTemp.css';\n\n\n\nclass InteractiveChartTemp extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        console.log(modal);\n        console.log(document.querySelector(\".modal\"))\n        document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        this.props.chart.append(\"rect\")\n        this.renderChart();\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn, x, y, width, height, predStartDate, xAxis, marginBottom, appendModal} = this.props;\n        console.log(marginBottom);\n        this.appendModal();\n        const predEndDate = x.domain()[1];\n        var svg = this.props.chart;\n        var confirmedData = reformatData(confirmedAvg);\n        const confirmedTemp = reformatData(confirmed);\n        const confirmedLastVal = getLastValue(confirmedTemp);\n        confirmedData.push({\n            date: getLastDate(confirmedTemp),\n            value: confirmedLastVal\n        })\n        console.log(confirmedData)\n        var aggregateData = reformatData(aggregate);\n        var forecastData = forecast.map((f)=> {\n            return cleanData(reformatData(f), predStartDate, confirmedLastVal);\n        });\n        aggregateData = cleanData(aggregateData, predStartDate, confirmedLastVal);\n        var predictionData = userPrediction;\n        var line = d3.line().curve(d3.curveCatmullRom)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        var predLine = d3.line().curve(d3.curveBasis)\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        const labels = ['User Prediction', 'Confirmed Data', 'Aggregate Data'].concat(orgs);\n        const color = d3\n            .scaleOrdinal()\n            .domain(labels)\n            .range(d3.schemeTableau10);\n        var confirmedBoundary = x(predStartDate);\n        var defs = svg\n            .append(\"defs\");\n        var confirmedClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"confirmed-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"width\", confirmedBoundary)\n                    .attr(\"height\", height)\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n        const confirmedArea = svg\n                .append('g')\n                .attr(\"clip-path\", \"url(#confirmed-clip)\");\n        var predictionClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"prediction-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"id\", \"prediction-rect\")\n                    .attr(\"width\", width - confirmedBoundary )\n                    .attr(\"height\", height)\n                    .attr(\"x\", confirmedBoundary)\n                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        var confirmedLine = confirmedArea.append(\"path\")\n            .attr(\"class\", \"confirmed line\")\n            .datum(confirmedData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[1]))\n            .style(\"stroke-width\", \"3px\")\n        var aggregateLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"aggregate line\")\n            .datum(aggregateData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[2]))\n            .style(\"stroke-width\", \"2px\")\n        predictionArea\n            .selectAll(\".forecast\")\n            .data(forecastData)\n            .enter()\n            .append(\"path\")\n                .attr(\"d\", line)\n                .attr(\"id\", (f, index) => orgs[index])\n                .attr(\"class\", \"forecast line\")\n                .style(\"stroke\", (f, index) => color(orgs[index]))\n                .style(\"stroke-width\", \"2px\");\n        \n        ///prediction data////\n        if (loggedIn) {\n            console.log(predEndDate)\n            predictionData = getMostRecentPrediction(userPrediction);\n            console.log(predictionData);\n            if (!predictionData) {\n                predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            }\n            predictionData = cleanPrediction(predictionData, predStartDate, predEndDate, confirmedLastVal);\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        }\n        var filteredData = predictionData.filter(predLine.defined())\n\n        var predictionLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"prediction line\")\n            .datum(predictionData)\n            .attr(\"d\", predLine)\n            .style(\"stroke\", color(labels[0]))\n            .style(\"stroke-width\", \"2px\")\n        \n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\".confirmed\");\n        const aggregatePath = document.querySelector(\".aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, x.domain()[0], predStartDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, predStartDate, getLastDate(aggregateData))\n        forecastData.map((f, index) => {\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, getLastDate(f));\n        })\n        var compiledData = [predictionData, confirmedData, aggregateData].concat(forecastData);\n        /////drag/////\n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n        var drag = d3.drag()\n                        .on(\"drag\", function() {\n                        console.log('yes');\n                        //hide \"draw your guess\" text\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, y.domain()[1], y.invert(pos[1]));\n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        compiledData[0].data = predictionData;\n                        filteredData = predictionData.filter(predLine.defined())\n                        predictionLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(labels[0]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        if(!loggedIn) {\n                            d3\n                                .select(\"#modal\")\n                                .style(\"display\", \"block\");\n                        }\n                        else {\n                            var lastPredDate = getLastDate(filteredData);\n                            getDataPointsFromPath(predictionData, predictionLine.node(), x, y, lastPredDate);\n                            savePrediction(predictionData, \"us_daily_deaths\");\n                        }\n                    });\n        svg.call(drag)\n\n        var modal = document.getElementById(\"modal\");\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n        }\n        //focus+context//\n        createFocusContext(svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color);\n        ///tooltip///\n    }\n    render() {\n        console.log(this.props.chart.node());\n        return(\n            <div></div>\n        )\n    }\n}\n\nexport default InteractiveChartTemp;","import React, { Component, Fragment } from 'react';\nimport * as d3 from 'd3'\nimport InteractiveChartTemp from '../InteractiveChartTemp';\n\n\nclass ParentChart extends Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            chart: null,\n            x: null,\n            y: null,\n            width: 0,\n            height: 0,\n            confirmedStartdate: null,\n            predStartDate: null,\n            predEndDate: null,\n            xAxis: null,\n            marginBottom: 0\n\n        }\n    }\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        //document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        var chart = this.setUpChart();\n        this.setState({chart: chart})\n    }\n\n    setUpChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, loggedIn, isProfile} = this.props;\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[0]);\n        const predStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[Object.keys(confirmed).length - 1]);\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength);\n        this.setState({confirmedStartDate: confirmedStartDate, predStartDate: predStartDate, predEndDate: predEndDate, predLength: predLength});\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        this.setState({marginBottom: margin.bottom});\n        console.log(margin.bottom, this.state.marginBottom)\n        this.setState({width: width, height: height})\n        var svg = d3.select(\".chart-container\")\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                    .attr(\"ref\", `${this.chartRef.current}`)\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([ 0, width ])\n                    //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        this.setState({xAxis: xAxis});\n        console.log(xAxis.node());\n        var yMax = d3.max(Object.values(confirmed));\n        forecast.map(f => {\n            var currMax = d3.max(f)\n            yMax = currMax > yMax ? currMax : yMax;\n        })\n        var y = d3.scaleLinear()\n            .domain([0, yMax])\n            .range([ height, 0 ])\n            .nice();\n        this.setState({x: x, y: y});\n\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n        return svg;\n    }\n\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.props;\n        console.log(forecast)\n        if(!this.state.chart || !this.state.marginBottom) return \"Loading\"\n        return(\n            <Fragment>\n                {!this.props.isProfile ? \n                <h1>UserPredictionChart</h1> : \n                <InteractiveChartTemp \n                    chart={this.state.chart}\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedAvg={confirmedAvg}\n                    aggregate={aggregate}\n                    loggedIn={loggedIn}\n                    x={this.state.x}\n                    y={this.state.y}\n                    width={this.state.width}\n                    height={this.state.height}\n                    predStartDate={this.state.predStartDate}\n                    xAxis={this.state.xAxis}\n                    marginBottom = {this.state.marginBottom}\n                    appendModal={this.appendModal()}\n                />}\n            </Fragment>\n        )\n    }\n}\n\nexport default ParentChart;","import React from 'react';\nimport ParentChart from '../../components/ParentChart';\n\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: null,\n      orgs: null,\n      confirmed: null,\n      confirmedAvg: null,\n      userPrediction: null,\n      aggregate: null,\n      loggedIn: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({ forecast: results, orgs });\n    });\n    fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n        this.setState({ userPrediction: data });\n    });\n    fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n        this.setState({ confirmed: data });\n    });\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      this.setState({ confirmedAvg: data });\n    });\n    fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n        this.setState({ aggregate: data });\n    });\n    fetch('/login-status/').then(res => res.json()).then(data => {\n        this.setState({ loggedIn: data['logged in'] });\n    });\n  }\n\n  render() {\n    const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.state;\n    if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !loggedIn) return 'Loading...';\n    const isProfile = this.props.isProfile;\n\n    return (\n      <div className=\"chart-container\">\n        <ParentChart\n          forecast={forecast}\n          orgs={orgs}\n          userPrediction={userPrediction}\n          confirmed={confirmed}\n          confirmedAvg={confirmedAvg}\n          aggregate={aggregate}\n          loggedIn={loggedIn}\n          isProfile={isProfile}\n          //category={\"us_daily\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React, { Component } from 'react';\n\nconst pstyle = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '20px'\n}\n\nconst h1style = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '40px'\n}\n\nclass AboutPage extends Component {\n    render() {\n        return(\n            <div>\n                <h1 style={h1style}>About</h1>\n                <h3></h3>\n                <p style={pstyle}> \n                    This Aggregate COVID-19 site aims to show various past data readings of coronavirus data, as well as future predictions from various sources. \n                    Different forecasts relating to the COVID-19 pandemic are displayed, and users can make their own predictions about the future trajectory of \n                    factors relating to the pandemic such as daily deaths, hospitalizations and cases.\n                    Our mission is to deliver future projections and collected data by providing the best information on the COVID-19 pandemic.\n                </p>\n                <br></br>\n                <h3 style={h1style}>How we Score</h3>\n                <p></p>\n            </div>\n        );  \n    }\n}\n\nexport default AboutPage;","import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n\n    render() {\n        return (\n            <div>\n                <div class=\"container landing\">\n                    <h1 class=\"logo\">COVID-19 Prediction</h1>\n                </div>\n                <div class=\"landing\">\n                    <div class=\"title\"> Welcome<br/>\n                        <button class=\"button\"><b><a href=\"#\">Start</a></b></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './LeaderboardChart.css';\n\nclass LeaderboardChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            userPrediction: null,\n            confirmed: null\n         };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.setState({userPrediction: this.props.userPrediction, confirmed: this.props.confirmed});\n        //this.renderChart(this.props.userPrediction, this.props.confirmed);\n        this.renderChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(prevProps);\n        console.log(this.props);\n\n        // only update chart if the data has changed\n        if (prevProps.userPrediction !== this.props.userPrediction) {\n            console.log(\"HEY\");\n            //this.setState({userPrediction: this.props.userPrediction, confirmed: this.props.confirmed})\n            //this.chartRef = React.createRef();\n            this.renderChart();\n        }\n    }\n\n\n    renderChart() {\n        var { userPrediction, confirmed } = this.props;\n\n        //format confirmedData, predictionData\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        var predictionData = userPrediction.map(d => ({\n            date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n            value: d.value\n        }));\n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        var predEndDate = predictionData[predictionData.length - 1].date;\n        const valueMax = 5000;\n\n        /////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 600 - margin.left - margin.right,\n            height = 300 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        var line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        var predLine = predLineGenerator\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"lbConfirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"lbPrediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(predictionData)\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        /*\n        d3.select('#leaderboard').on(\"click\", function() {\n            predCurve.exit().remove();\n        })*/\n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default LeaderboardChart;\n","import React from 'react';\nimport { useTable } from 'react-table';\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport LeaderboardChart from '../LeaderboardChart';\n\nfunction Table({ columns, data, confirmed, style }) {\n  // Use the state and functions returned from useTable to build UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n    confirmed,\n    style\n  });\n\n  console.log(data);\n\n  // Render the UI for table\n  return (\n    <table style={style} className=\"table table-bordered table-hover table-sm\" {...getTableProps()}>\n      <thead className=\"thead-dark\">\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {<RenderTable users={data} confirmed={confirmed} />}\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n        <tr>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nfunction createChart(user, confirmed) {\n  ReactDOM.render(<LeaderboardChart userPrediction={user.prediction} confirmed={confirmed} />, document.getElementById('predictionChart'));\n}\n\nfunction RenderTable({ users, confirmed }) {\n  return users.map((user, index) => {\n    // ignore null values\n    if (user.mse_score == null) {\n      return;\n    }\n    return (\n       <tr onClick={() => createChart(user, confirmed)}>\n          <td>{user.username}</td>\n          <td>{user.date}</td>\n          <td>{user.mse_score.toFixed(2)}</td>\n       </tr>\n    );\n });\n}\n\n\nclass Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: null,\n      columns: null,\n      confirmed: null\n    }\n  }\n\n  componentDidMount() {\n    fetch('/user-data').then(res => res.json()).then(data => {\n      this.setState({ users: data });\n      //console.log(data);\n    });\n\n    this.setState({ columns: [\n        {\n          Header: 'Username',\n          accesor: 'username',\n        },\n        {\n          Header: 'Prediction Date',\n          accesor: 'date',\n        },\n        {\n          Header: 'MSE',\n          accesor: 'mse_score',\n        }\n      ]\n    });\n\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n  }\n\n\n  renderTable() {\n    return this.state.users.map((user, index) => {\n      // ignore null values\n      if (user.mse_score == null) {\n        return;\n      }\n      return (\n         <tr>\n            <td>{user.username}</td>\n            <td>{user.date}</td>\n            <td>{user.mse_score.toFixed(2)}</td>\n         </tr>\n      );\n   });\n  }\n\n  render() {\n    const tableStyle = {\n      width: \"50%\",\n      textAlign: \"center\",\n      overflowY: \"scroll\"\n    };\n\n    \n    const chartStyle = {\n      position: \"fixed\",\n      width: \"50%\",\n      left: \"50%\"\n    };\n\n    const { users, columns, confirmed } = this.state;\n    if (!users || !columns || !confirmed) return 'Loading...';\n\n    return (\n      <div>\n        <h2>Leaderboard</h2>\n        <div className=\"d-flex flex-row\">>\n          <Table id=\"leaderboard\" columns={columns} data={users} confirmed={confirmed} style={tableStyle} />\n          <div id=\"predictionChart\" className=\"text-center\" style={chartStyle}>Click on a row to display a user's prediction!</div>\n        </div>\n      </div>\n    );\n  }\n}\n  \nexport default Leaderboard;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, getAllDataPoints, sortDictByDate, sortStringDates } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const userStatus = this.props.userStatus;\n        console.log(userStatus)\n        if (userStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.chartRef.current.innerHTML = \"Please log in\"\n        }\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const category = this.state.category;\n        var compiledData = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n\n        console.log(\"USER PREDICTION\");\n        console.log(userPrediction);\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n        }\n\n        predictionData = sortDictByDate(predictionData);\n        console.log(\"PREDICTION DATA\");\n        console.log(predictionData);\n\n        console.log(predictionData)\n        //get most recent prediction\n        var dates = sortStringDates(Object.keys(userPrediction))\n        const mostRecentPred = predictionData[dates[dates.length - 1]]\n        console.log(\"MOST RECENT PRED\");\n        console.log(mostRecentPred)\n        //push to compiledData\n        compiledData = [confirmedData, mostRecentPred]\n        console.log(dates[0])\n        console.log(d3.timeFormat(\"%B %d, %Y\")(dates[0]))\n    \n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        const valueMax = 5000;\n        \n\n        /*dateList.map(d => {\n            dates.push({\n                date: d\n            })\n        })*/\n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //DRAW TODAY LINE//\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        console.log(today);\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"display\", \"none\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(legendString[index]);\n                    })\n                    .attr(\"id\", \"circle\")\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"display\", \"none\");\n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"value\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"date\")\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"transform\", \"rotate(-90)\")\n        \n        svg\n                .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr(\"id\", \"interactive-area\")\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"display\", \"none\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"block\");\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var todayDate = new Date();\n                        todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0,10));\n                        var date = x.invert(d3.mouse(this)[0])\n                        if (+date > +todayDate) {\n                            date = todayDate;\n                        }\n                        const index = d3.bisectRight(dates, date);\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index === 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                        ////////////////////\n\n\n\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.length === 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(d, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d[index - 1];\n                                }\n                                const b = d[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) === +data.date || +d3.timeDay.ceil(date) === +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                        element\n                                                .select('#value')\n                                                .style(\"display\", \"block\")\n                                                .text(Math.round(data.value))\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                            \n                                        element\n                                                .select(\"#date\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`)\n                                                .text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                        return \"translate(0,0)\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                element                \n                                    .selectAll(\"text\")\n                                        .style(\"display\", \"none\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"display\", \"none\");\n                            });\n                    })\n                    .on(\"click\", function() {\n                        var date = x.invert(d3.mouse(this)[0])\n                        const index = d3.bisectRight(dates, date);\n                        console.log(dates)\n                        console.log(date)\n                        console.log(index)\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index === 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                    })\n                \n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n","import React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            userStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ userStatus: data });\n            console.log(data);\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, userStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <UserPredictionChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default UserPredictionChartContainer;","import React from 'react';\nimport UserPredictionChartContainer from '../../containers/UserPredictionChartContainer';\n\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    /*fetch('/user').then(res => res.json()).then(data => {\n      this.setState({ user: data });\n    });*/\n  }\n\n  \n\n  renderUser() {\n    return (\n      <div>\n        <h3>My Predictions</h3>\n        <UserPredictionChartContainer/>\n      </div>\n\n        /*<div>\n            <p><b>Name: </b>{ this.state.user['name'] }</p>\n            <p><b>Poll score: </b>{ this.state.user['score'] }</p>\n            <p><b>Country/Location: </b></p>\n            <p><b>Bio: </b></p>\n\n            <p>Edit your page:</p>\n            <form action='/action' method='POST'>\n            <input type=\"text\" name=\"bio\" placeholder=\"Bio...\" />\n            <input type=\"text\" name=\"location\" placeholder=\"Location...\" />\n            <button type='submit'>Create</button>\n            </form>\n          \n        </div>*/\n    );\n  }\n\n  render() {\n    const { user } = this.state;\n    //if (!user) return 'Loading...';\n\n    return (\n        <div>\n            {this.renderUser()}\n        </div>\n    );\n  }\n}\n  \nexport default ProfilePage;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { timeDay } from 'd3';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0] + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n\n        var predictionData = [];//where we will store formatted userPrediction\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed)\n        confirmedData.push({\n            date: confirmedLastDate,\n            value: confirmedLastVal\n        })\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n\n        var aggregateData = reformatData(aggregate);\n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            var idx = o.indexOf(\"(\");\n            models.push(o.substring(0, idx - 1));\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d){ return color(d)}))\n\n        \n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d, index){ return color(names[index])})\n                .text(function(d){console.log(\"D TEXT\"); console.log(d); return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(legendString[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n        console.log(compiledData);\n        const tooltipArea = svg\n        .append(\"g\")\n        .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n        .attr(\"id\", \"tooltip-line\")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"0.5px\")\n        .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n            //  .style(\"background-color\", \"white\")\n            // .style(\"border\", \"solid\")\n            // .style(\"border-width\", \"2px\")\n            // .style(\"border-radius\", \"5px\")\n            // .style(\"padding\", \"5px\")\n            .style(\"position\", \"absolute\")\n            .style(\"display\", \"block\")\n            .style(\"left\", \"10px\")\n            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                        .selectAll(\".mouse-per-line\")\n                        .data(compiledData)\n                        .enter()\n                        .append(\"g\")\n                        .attr(\"class\", \"mouse-per-line\");\n\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(names[index]);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n            .append(\"svg:rect\")\n            .attr('width', width)\n            .attr('height', height)\n            .attr('fill', 'none')\n            .attr('pointer-events', 'all')\n            //.style(\"cursor\", \"pointer\")\n            .on('mouseout', function() { // on mouse out hide line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line circle\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line text\")\n                .style(\"opacity\", \"0\")\n                tooltipBox.style(\"display\", \"none\")\n            })\n            .on('mouseover', function() { // on mouse in show line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"1\");\n                tooltipBox.style(\"display\", \"block\")\n            })\n            .on('mousemove', function() { // mouse moving over canvas\n                var mouse = d3.mouse(this);\n                var xCoord = mouse[0];\n                var yCoord = mouse[1];\n                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                    chart.attr(\"cursor\", \"pointer\");\n                }\n                else {\n                    chart.attr(\"cursor\", \"default\");\n                }\n                d3\n                    .select(\"#tooltip-line\")\n                    .attr(\"d\", function() {\n                        var d = \"M\" + xCoord + \",\" + height;\n                        d += \" \" + xCoord + \",\" + 0;\n                        return d;\n                    });\n                tooltipBox\n                    .style('left', `${d3.event.pageX + 20}px`)\n                    .style('top', `${d3.event.pageY + 20}px`)\n                d3\n                    .selectAll(\".mouse-per-line\")\n                    .attr(\"transform\", function(d, i) {\n                        if (d.data.length === 0) {return;}\n                        var date = x.invert(xCoord);\n                        var value = -1;\n                        d.data.map(d => {\n                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                value = d.value;\n                            }\n                        })\n                        var element = d3.select(this);\n                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                        if (value >= 0) {\n                            if(textBox.empty()) {\n                                textBox = tooltipBox.append(\"div\")\n                                                    .attr(\"class\", d.name)\n                                                    .style(\"padding-left\", \"10px\")\n                                                    .style(\"padding-right\", \"10px\")\n                                                    .style(\"background-color\", color(names[i]))\n                                                    .style(\"color\", \"white\");\n\n                            }\n                            else {\n                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                            }\n                            element.select(\"circle\")\n                                    .style(\"opacity\", \"1\");\n                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                        }\n                        else {\n                            if(!textBox.empty()) {\n                                textBox.remove();\n                            }\n                            element\n                                    .select(\"circle\")\n                                    .style(\"opacity\", \"0\");\n                        }\n                        \n                });\n            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            console.log(\"yes\")\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            compiledData[2].data = predictionData;\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n    }\n\n    renderChart() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0] + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 230;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                        .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        confirmedData.push({\n            date: confirmedLastDate,\n            value: confirmedLastVal\n        })\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedLastDate; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            var idx = o.indexOf(\"(\");\n            models.push(o.substring(0, idx - 1));\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        console.log(names);\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"circle\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d, i){ return color(names[i])})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", modelClassNames[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length === 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(models[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            //  .style(\"background-color\", \"white\")\n                            // .style(\"border\", \"solid\")\n                            // .style(\"border-width\", \"2px\")\n                            // .style(\"border-radius\", \"5px\")\n                            // .style(\"padding\", \"5px\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, i) {\n                            return color(names[i]);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                                tooltipBox.style(\"display\", \"none\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                tooltipBox.style(\"display\", \"block\")\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                tooltipBox\n                                    .style('left', `${d3.event.pageX + 20}px`)\n                                    .style('top', `${d3.event.pageY + 20}px`)\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length === 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        var value = -1;\n                                        d.data.map(d => {\n                                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                                value = d.value;\n                                            }\n                                        })\n                                        var element = d3.select(this);\n                                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                                        if (value >= 0) {\n                                            if(textBox.empty()) {\n                                                textBox = tooltipBox.append(\"div\")\n                                                                     .attr(\"class\", d.name)\n                                                                     .style(\"padding-left\", \"10px\")\n                                                                     .style(\"padding-right\", \"10px\")\n                                                                     .style(\"background-color\", color(names[i]))\n                                                                     .style(\"color\", \"white\");\n\n                                            }\n                                            else {\n                                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                                            }\n                                            element.select(\"circle\")\n                                                    .style(\"opacity\", \"1\");\n                                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                        }\n                                        else {\n                                            if(!textBox.empty()) {\n                                                textBox.remove();\n                                            }\n\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"opacity\", \"0\");\n                                        }\n                                        \n                                });\n                            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        // const focusHeight = 100;\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            console.log(\"brushed\")\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n                \n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            console.log(\"yes\")\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            focusPredCurve.datum(filtered)\n                            .attr(\"d\", focusPredLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n            compiledData[2].data = predictionData;\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n    \n        /*function hover(svg, path) {\n  \n            if (\"ontouchstart\" in document) svg\n                .style(\"-webkit-tap-highlight-color\", \"transparent\")\n                .on(\"touchmove\", moved)\n                .on(\"touchstart\", entered)\n                .on(\"touchend\", left)\n            else svg\n                .on(\"mousemove\", moved)\n                .on(\"mouseenter\", entered)\n                .on(\"mouseleave\", left);\n          \n            const dot = svg.append(\"g\")\n                .attr(\"display\", \"none\");\n          \n            dot.append(\"circle\")\n                .attr(\"r\", 2.5);\n          \n            dot.append(\"text\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 10)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"y\", -8);\n          \n            function moved() {\n              d3.event.preventDefault();\n              const mouse = d3.mouse(this);\n              const xm = x.invert(mouse[0]);\n              const ym = y.invert(mouse[1]);\n              const i1 = d3.bisectLeft(data.dates, xm, 1);\n              const i0 = i1 - 1;\n              const i = xm - data.dates[i0] > data.dates[i1] - xm ? i1 : i0;\n              const s = d3.least(data.series, d => Math.abs(d.values[i] - ym));\n              path.attr(\"stroke\", d => d === s ? null : \"#ddd\").filter(d => d === s).raise();\n              dot.attr(\"transform\", `translate(${x(data.dates[i])},${y(s.values[i])})`);\n              dot.select(\"text\").text(s.name);\n            }\n          \n            function entered() {\n              path.style(\"mix-blend-mode\", null).attr(\"stroke\", \"#ddd\");\n              dot.attr(\"display\", null);\n            }\n          \n            function left() {\n              path.style(\"mix-blend-mode\", \"multiply\").attr(\"stroke\", null);\n              dot.attr(\"display\", \"none\");\n            }\n          }*/\n\n\n\n    }\n        \n    render() {\n        return(<div>\n            <h2>US Daily Deaths</h2>\n            <p>Daily deaths is the best indicator of the progression of the pandemic.</p>\n            {/*<p>Current total: {this.confirmedData.value}</p>*/}\n            <div ref={this.chartRef}></div>\n            <div class=\"tooltip-box\"></div>\n            <div class=\"speech-bubble left\">shift or resize the gray box to change the zoom level</div>\n            </div>);\n    }\n}\n\nexport default InteractiveChart;","import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, getLastValue, organizeData } from '../../utils/data';\n\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            confirmedLastVal: null,\n            confirmedLastDate: null,\n            userPrediction: null,\n            aggregate: null,\n            mse: null,\n            user_mse: null,\n            loginStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n        fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n            console.log(\"USER PREDICTION\");\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n            this.setState({ \n                confirmedLastVal: Object.values(data)[Object.values(data).length - 1],\n                confirmedLastDate: Object.keys(data)[Object.values(data).length - 1]\n             });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n            //console.log(data);\n        });\n        fetch('/us-mse').then(res => res.json()).then(data => {\n            this.setState({ mse: data });\n        });\n        fetch('/user-mse').then(res => res.json()).then(data => {\n            this.setState({ user_mse: data });\n            console.log(\"USER MSE\");\n            console.log(data);\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ loginStatus: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse, loginStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !confirmedLastVal|| !confirmedLastDate || !aggregate || !mse || !loginStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <InteractiveChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedLastVal={confirmedLastVal}\n                    confirmedLastDate={confirmedLastDate}\n                    aggregate={aggregate}\n                    mse={mse}\n                    loginStatus={loginStatus}\n                    //userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;","import React from \"react\";\nimport L from \"leaflet\";\nimport statesData from './us-states.json';\nimport countriesData from './countries.json';\n//import './map.css'\n\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst mapStyle = (feature) => {\n  return ({\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n    fillColor: \"#FFEDA0\"\n\n  });\n}\n\nclass Mapportal extends React.Component {\n  componentDidMount() {\n    // create map\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [\n        L.tileLayer(\"https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\",\n        {\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n          id: \"dark-v10\"\n        })\n      ]\n    });\n\n    this.geojson = L.geoJson(statesData, {\n      style: mapStyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    this.countries = L.geoJson(countriesData, {\n\t\tstyle: mapStyle,\n\t\tonEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    \n    var overlay = {\n\t\t\t\"Countries\": this.countries,\n\t\t\t\"States\" : this.geojson\n\t};\n  L.control.layers(overlay).addTo(this.map);\n\n\n    // add layer\n    this.layer = L.layerGroup().addTo(this.map);\n  }\n  onEachFeature = (feature, layer) => {\n\tlayer.bindTooltip(feature.properties.name.toString(),{noHide:true}).openTooltip();\n    layer.on({\n      mouseover: this.highlightFeature,\n      mouseout: this.resetHighlight\n    });\n    layer.on(\"click\",function(e){\n      // this gets the id for each country, and we can use that to redirect to different pages since each \n      // json layer has different ids. the states are 1-50, and the countries are their official code\n      window.alert(layer.feature.id);\n  });\n  }\n  highlightFeature = (e) => {\n    var layer = e.target;\n\n    layer.setStyle({\n      fillColor: \"#FFEDA0\",\n      weight: 5,\n      color: \"#666\",\n      dashArray: \"\",\n      fillOpacity: 0.7\n    });\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n    //layer.bringToFront();\n\n  \n  }\n  resetHighlight = (event) => {\n\tthis.geojson.resetStyle(event.target);\n\tthis.countries.resetStyle(event.target);\n  }\n\n  render() {\n    return <div id=\"map\" style={style} />;\n  }\n}\n\nexport default Mapportal;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './Login.css';\nimport { Redirect } from \"react-router\";\n\n\nclass Login extends React.Component{\n    constructor(props) {\n      super(props)\n      this.state = { username: '', password: '', loggedinstate: '', loginStatus: false }\n    }  \n      \n    componentDidMount(){\n      //this.isLoggedIn();\n    }\n\n    saveLogin(username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n        \n    }\n\n    wasSucess = () => {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{ method: 'GET'})\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          this.setState({loginStatus: data['status']});\n          resolve(data);\n        });\n      })\n    }\n    \n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 200)\n      })\n\t\t}\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n  \n    }\n    \n    async handleSubmit(event) {\n      console.log(\"submitting\");\n      event.preventDefault();\n      await this.saveLogin(this.state.username, this.state.password);\n      /*await this.wasSucess().then(status => {\n        console.log(status);\n      });*/\n      await this.updateLoginState();\n    }\n\n\n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)} className='form-group'>\n          <h1>Sign In</h1>\n          <label className='spanStyle'><b>Username</b></label>\n          <br></br>\n          <input\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span className='spanStyle'><b>Password</b></span>\n          <br></br>\n          <input\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n            required\n          />\n          <br></br>\n            \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from \"react-router\";\nimport '../LogIn/Login.css';\n\nclass SignUp extends React.Component{\n    constructor(props) {\n       super(props)\n      this.state = { nam:'', email: '', username: '', password: '', loginStatus: false }\n    }\n\n    saveLogin(nam, email, username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/signup/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"name\": nam, \"email\": email, \"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n    }\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'nam'){\n        this.setState({ nam: event.target.value});\n      }\n      if (name === 'email'){\n        this.setState({ email: event.target.value});\n      }\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n\n    }\n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 300)\n      })\n    }\n    \n    async handleSubmit(event) {\n      event.preventDefault();\n      await this.saveLogin(this.state.nam, this.state.email, this.state.username, this.state.password);\n      this.updateLoginState();\n    }\n    \n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <h1>Sign Up</h1>\n          <span className='signupSpan'><b>Name</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.nam}\n            onChange={this.handleChange.bind(this)}\n            name='nam'\n          />\n          <br></br>\n          <span className='signupSpan'><b>Email</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.email}\n            onChange={this.handleChange.bind(this)}\n            name='email'\n          />\n          <br></br>\n          <span style={{paddingRight:'280px'}}><b>Username</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span style={{paddingRight:'285px'}}><b>Password</b></span>\n          <br></br>\n          <input \n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n          />\n          <br></br>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default SignUp;","import React from 'react';\nimport './App.css';\n//import '/node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom'\nimport Navbar from './components/Navbar';\nimport ChartContainer from './containers/ChartContainer';\n// import newDeathsContainer from './containers/newDeathsContainer';\nimport LandingPage from './pages/LandingPage';\nimport AboutPage from './pages/AboutPage';\nimport Leaderboard from './components/Leaderboard';\n// import MarketChart from './components/MarketChart';\nimport ProfilePage from './pages/ProfilePage';\nimport InteractiveChartContainer from './containers/InteractiveChartContainer';\nimport UserPredictionChartContainer from './containers/UserPredictionChartContainer';\nimport * as ROUTES from \"./constants/routes\";\nimport 'leaflet/dist/leaflet.css';\nimport Mapportal from './components/Mapportal';\nimport Login from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path={ROUTES.LANDING} >\n              <br></br>\n            <div class=\"dropdown\">\n            <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Country\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              <a class=\"dropdown-item\" href=\"/\">USA</a>\n              \n            </div>\n          </div><br></br>\n              <InteractiveChartContainer/>\n              </Route>\n            {/* <Route exact path={ROUTES.US_NATIONAL_CUM} component={ChartContainer} />\n            <Route exact path={ROUTES.US_NATIONAL_INC} component={newDeathsContainer} /> */}\n            <Route exact path={ROUTES.MAP_PORTAL} component={Mapportal} />\n            <Route exact path={ROUTES.LEADERBOARD} component={Leaderboard} />\n            {/* <Route exact path={ROUTES.MARKET} component={MarketChart} /> */}\n            <Route exact path={ROUTES.PROFILE} component={ProfilePage} />\n            <Route exact path={ROUTES.SIGN_IN} component={Login} />\n            <Route exact path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route exact path={ROUTES.ABOUT} component={AboutPage} />\n            <Route exact path=\"/temp\" render={(props) => <ChartContainer isProfile={true}/>}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/COVIDforecasts-logo-white.e6ddd865.png\";"],"sourceRoot":""}